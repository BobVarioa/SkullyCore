{
  "version": 3,
  "sources": ["../node_modules/cppkies/src/achievement.ts", "../node_modules/cppkies/src/upgrade.ts", "../node_modules/cppkies/src/spritesheets.ts", "../node_modules/cppkies/src/helpers.ts", "../node_modules/cppkies/src/saves.ts", "../node_modules/cppkies/src/buildings.ts", "../node_modules/cppkies/src/injects/postInject.ts", "../node_modules/cppkies/src/index.ts", "../node_modules/cppkies/src/lib/eventemitter.ts", "../node_modules/cppkies/src/injects/generic.ts", "../node_modules/cppkies/src/tiers.ts", "../node_modules/cppkies/src/dragon.ts", "../node_modules/cppkies/src/milk.ts", "../node_modules/cppkies/src/vars.ts", "../node_modules/cppkies/src/injects/basegame.ts", "../jscc_temp/src/index.ts", "../jscc_temp/src/tags.ts", "../jscc_temp/src/upgrade/AdvancedHeavelyUpgrade.ts", "../jscc_temp/src/upgrade/AdvancedUpgrade.ts", "../jscc_temp/src/rifts.ts", "../jscc_temp/src/bars/BaseWidget.ts", "../jscc_temp/src/helpers/common.ts", "../jscc_temp/src/helpers/tooltip.ts", "../jscc_temp/src/bars/BuildingBarMenuWidget.ts", "../jscc_temp/src/bars/TopBarMenuWidget.ts", "../jscc_temp/src/buff/AdvancedBuff.ts", "../jscc_temp/src/quests.ts", "../jscc_temp/src/achievement/AdvancedAchievement.ts", "../jscc_temp/src/achievement/AuthorAchievement.ts"],
  "sourcesContent": ["import { resolveIcon } from \"./spritesheets\"\nimport master from \"./vars\"\nimport { loadAchievement } from \"./saves\"\nimport { applyAllProps } from \"./helpers\"\nimport { Building } from \"./buildings\"\n\nexport const customAchievements: Achievement[] = []\n\nexport class Achievement extends Game.Achievement {\n\t/**\n\t * Creates an achievement\n\t * @param name The name of the achievement\n\t * @param desc The description of it\n\t * @param icon  The icon for it\n\t */\n\tconstructor(name: string, desc: string, icon: Game.Icon) {\n\t\tsuper(name, desc, resolveIcon(icon))\n\t\tapplyAllProps(this, loadAchievement(this))\n\t\tcustomAchievements.push(this)\n\t\tif (this.won && Game.CountsAsAchievementOwned(this.pool))\n\t\t\tGame.AchievementsOwned++\n\t}\n}\n\nexport class BankAchievement extends Achievement\n\timplements Game.BankAchievementClass {\n\ttreshold: number\n\t/**\n\t * Creates an achievement which is automatically unlocked on CBTA amount\n\t * @param name Name of the achievement\n\t * @param icon The icon of it\n\t * @param q The optional quote of it\n\t * @param treshold The amount of cookies required, if not set, automatically calculated\n\t */\n\tconstructor(\n\t\tname: string,\n\t\ticon: Game.Icon,\n\t\tq?: string | null,\n\t\ttreshold = 10 ** Math.floor(Game.BankAchievements.length * 1.5 + 2)\n\t) {\n\t\tsuper(\n\t\t\tname,\n\t\t\t`Bake <b>${toFixed(treshold)}</b> cookie${\n\t\t\t\tMath.abs(treshold) === 1 ? \"\" : \"s\"\n\t\t\t} in one ascension.${q ? `<q>${q}</q>` : \"\"}`,\n\t\t\ticon\n\t\t)\n\t\tthis.treshold = treshold\n\t\tthis.order = 100 + Game.BankAchievements.length * 0.01\n\t\tGame.BankAchievements.push(this)\n\t}\n}\n\nexport class CpsAchievement extends Achievement\n\timplements Game.CpsAchievementClass {\n\ttreshold: number\n\t/**\n\t * Creates an achievement which is automatically unlocked on CpS amount\n\t * @param name Name of the achievement\n\t * @param icon The icon of it\n\t * @param q The optional quote of it\n\t * @param treshold The amount of cookies per second required, if not set, automatically calculated\n\t */\n\tconstructor(\n\t\tname: string,\n\t\ticon: Game.Icon,\n\t\tq?: string | null,\n\t\ttreshold = 10 ** Math.floor(Game.BankAchievements.length * 1.2)\n\t) {\n\t\tsuper(\n\t\t\tname,\n\t\t\t`Bake <b>${toFixed(treshold)}</b> cookie${\n\t\t\t\tMath.abs(treshold) === 1 ? \"\" : \"s\"\n\t\t\t} per second.${q ? `<q>${q}</q>` : \"\"}`,\n\t\t\ticon\n\t\t)\n\t\tthis.treshold = treshold\n\t\tthis.order = 200 + Game.CpsAchievements.length * 0.01\n\t\tGame.CpsAchievements.push(this)\n\t}\n}\n\nexport class TieredAchievement<Tier extends string | number> extends Achievement\n\timplements Game.TieredAchievementClass<Tier> {\n\tbuildingTie: Game.Object\n\tpool: \"normal\"\n\ttier: Tier\n\t/**\n\t * Creates an achievement which is won by having an amount of buildings\n\t * @param name The name of it\n\t * @param quote The optional quote of it\n\t * @param tier The upgrade's tier, is the id of the tier, ex. `2`(Berrylium), `7`(Jetmint), etc. (Can be \"cursor2\" or \"cursor50\" for special cursor amounts)\n\t * @param building The buildings linked to this achievement\n\t */\n\tconstructor(\n\t\tname: string,\n\t\tquote: string | null,\n\t\tbuilding: Game.Object | string,\n\t\ttier: Tier | \"cursor2\" | \"cursor50\"\n\t) {\n\t\tconst buildingObject =\n\t\t\ttypeof building === \"object\" ? building : Game.Objects[building]\n\t\tlet icon: Game.Icon | null = null\n\t\tlet req = -1\n\t\tif (buildingObject.id === 0) {\n\t\t\tswitch (tier) {\n\t\t\t\tcase \"cursor2\":\n\t\t\t\t\ticon = [0, 6]\n\t\t\t\t\treq = 2\n\t\t\t\t\tbreak\n\t\t\t\tcase \"cursor50\":\n\t\t\t\t\ticon = [1, 6]\n\t\t\t\t\treq = 50\n\t\t\t\t\tbreak\n\t\t\t\tdefault:\n\t\t\t\t\tif (Game.Tiers[tier].achievUnlock <= 0) {\n\t\t\t\t\t\tconsole.warn(\"Tier has invalid unlock amount\")\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\treq = tier === 1 ? 1 : Game.Tiers[tier].achievUnlock * 2\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t\tmaster.buildingHooks.Cursor.on(\"buy\", () => {\n\t\t\t\tif (Game.Objects.Cursor.amount >= req) Game.Win(this.name)\n\t\t\t})\n\t\t} else req = Game.Tiers[tier].achievUnlock\n\t\tsuper(\n\t\t\tname,\n\t\t\t`Have <b>${req}</b> ${\n\t\t\t\tMath.abs(req) === 1 ? buildingObject.single : buildingObject.plural\n\t\t\t}.${quote ? `<q>${quote}</q>` : \"\"}`,\n\t\t\ticon ?? Game.GetIcon(buildingObject.name, tier)\n\t\t)\n\t\tGame.SetTier(\n\t\t\tbuildingObject.name,\n\t\t\ttier === \"cursor2\" || tier === \"cursor50\" ? 1 : tier\n\t\t)\n\n\t\tbuildingObject.tieredAchievs[tier] = this\n\t\tthis.buildingTie = buildingObject\n\n\t\tthis.order = 1000 + buildingObject.id * 100 + this.id / 1000\n\t\t// Manually patch order since Orteil doesn't like consistency\n\t\tthis.order -= Math.max(0, Math.min(buildingObject.id - 4, 3)) * 75\n\t\tif (buildingObject.id >= 8) this.order -= 75\n\t\tif (buildingObject.id === 0) this.order += 50\n\t}\n}\n\nexport class ProductionAchievement extends Achievement {\n\t/**\n\t * Creates a production achievement (Make \\_ from only \\_ achievements)\n\t * @param name Name of the achievement\n\t * @param building The building of the achivement\n\t * @param tier The tier of productivity, not the normal tier, fully works with only `1`, `2`, `3`, otherwise icon will be messed up.\n\t * @param quote The (optional) quote of it\n\t * @param mult The additional multiplier, should be used if the achievement is too easy to obtain\n\t */\n\tconstructor(\n\t\tname: string,\n\t\tbuilding: string | Game.Object,\n\t\ttier: number,\n\t\tquote?: string | null,\n\t\tmult?: number | null\n\t) {\n\t\tif (typeof building === \"string\") building = Game.Objects[building]\n\t\tconst icon: Game.Icon = [\n\t\t\tbuilding.iconColumn,\n\t\t\t21 + tier,\n\t\t\tbuilding instanceof Building ? building.iconLink : undefined,\n\t\t]\n\t\tconst pow = 10 ** (12 + building.id + (mult ?? 0) + (tier - 1) * 7)\n\t\tsuper(\n\t\t\tname,\n\t\t\t`Make <b>${toFixed(pow)}</b> cookies just from ${building.plural}.${\n\t\t\t\tquote ? `<q>${quote}</q>` : \"\"\n\t\t\t}`,\n\t\t\ticon\n\t\t)\n\t\tthis.order = 1020 + building.id * 100 + this.id / 1000\n\t\t// Manually patch order since Orteil doesn't like consistency\n\t\tthis.order -= Math.max(0, Math.min(building.id - 4, 3)) * 75\n\t\tif (building.id >= 8) this.order -= 75\n\t\tif (building.id === 0) this.order += 50\n\t\tbuilding.productionAchievs.push({ pow, achiev: this })\n\t}\n}\n\nexport class Level10Achievement extends Achievement {\n\t/**\n\t * Creates an achievement which is given for getting level 10 of the building\n\t * @param name Name of the achievement\n\t * @param building The building to track the level of\n\t * @param quote The (optional) quote of it\n\t */\n\tconstructor(\n\t\tname: string,\n\t\tbuilding: string | Game.Object,\n\t\tquote?: string | null\n\t) {\n\t\tif (typeof building === \"string\") building = Game.Objects[building]\n\t\tconst icon: Game.Icon = [\n\t\t\tbuilding.iconColumn,\n\t\t\t26,\n\t\t\tbuilding instanceof Building ? building.iconLink : undefined,\n\t\t]\n\t\tsuper(\n\t\t\tname,\n\t\t\t`Reach level <b>10</b> ${building.plural}.${\n\t\t\t\tquote ? `<q>${quote}</q>` : \"\"\n\t\t\t}`,\n\t\t\ticon\n\t\t)\n\t\tthis.order = 1020 + building.id * 100 + this.id / 1000\n\t\t// Manually patch order since Orteil doesn't like consistency\n\t\tthis.order -= Math.max(0, Math.min(building.id - 4, 3)) * 75\n\t\tif (building.id >= 8) this.order -= 75\n\t\tif (building.id === 0) this.order += 50\n\t\tbuilding.levelAchiev10 = this\n\t}\n}\n\nexport class MouseAchievement<\n\tTier extends string | number\n> extends Achievement {\n\tpool: \"normal\"\n\ttier: Tier\n\t/**\n\t * Creates an achievement which is unlocked when a specific amount of cookies is made\n\t * @param name Name of the achievement\n\t * @param quote Quote (flavour text) of it\n\t * @param tier The achievement's tier, is the id of the tier, ex. `2`(Berrylium), `7`(Jetmint), `synergy2`(Synergy II), etc.\n\t */\n\tconstructor(name: string, tier: Tier, quote: string) {\n\t\tconst tierPow = parseInt(tier.toString())\n\t\tsuper(\n\t\t\tname,\n\t\t\t`Make <b>${toFixed(10 ** (1 + tierPow * 2))}</b> cookies from clicking.${\n\t\t\t\tquote ? `<q>${quote}</q>` : \"\"\n\t\t\t}`,\n\t\t\tGame.GetIcon(\"Mouse\", tier) // Injected in `basegame.ts`\n\t\t)\n\t\tthis.pool = \"normal\"\n\t\tthis.tier = tier\n\t\tthis.order = 1000 + this.id / 1000\n\t\tif (!Game.Tiers[tier].special && !isNaN(tierPow))\n\t\t\tmaster.on(\"check\", () => {\n\t\t\t\tif (Game.handmadeCookies >= 10 ** (1 + tierPow * 2)) Game.Win(this.name)\n\t\t\t})\n\t}\n}\n", "import master from \"./vars\"\nimport { loadUpgrade } from \"./saves\"\nimport { CommonValue, toSentenseCase } from \"./helpers\"\nimport { resolveIcon } from \"./spritesheets\"\n\nexport const customUpgrades: Upgrade[] = []\n\n/**\n * The class for upgrades\n */\nexport class Upgrade extends Game.Upgrade {\n\t/**\n\t * Creates an upgrade\n\t * @param name The name of the upgrade\n\t * @param desc The description of it\n\t * @param price The price of it\n\t * @param icon  The icon for it\n\t * @param buyFunc The function that gets called when you buy the upgrade\n\t */\n\tconstructor(\n\t\tname: string,\n\t\tdesc: CommonValue<string>,\n\t\tprice: CommonValue<number>,\n\t\ticon: CommonValue<Game.Icon>,\n\t\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\t\tbuyFunc: () => void = (): void => {}\n\t) {\n\t\tsuper(\n\t\t\tname,\n\t\t\ttypeof desc === \"function\" ? \"\" : desc,\n\t\t\ttypeof price === \"function\" ? 0 : price,\n\t\t\ttypeof icon === \"function\" ? [0, 0] : resolveIcon(icon),\n\t\t\tbuyFunc\n\t\t)\n\n\t\tif (typeof desc === \"function\") this.descFunc = desc\n\t\tif (typeof price === \"function\") this.priceFunc = price\n\t\tif (typeof icon === \"function\")\n\t\t\tthis.iconFunction = () => resolveIcon(icon())\n\t\tcustomUpgrades.push(this)\n\t\tconst loadProps = loadUpgrade(this)\n\t\tfor (const i in loadProps) this[i] = loadProps[i]\n\t\tGame.upgradesToRebuild = 1\n\t\tif (this.bought && Game.CountsAsUpgradeOwned(this.pool))\n\t\t\tGame.UpgradesOwned++\n\t}\n}\n\n/**\n * The class for heavenly upgrades\n */\nexport class HeavenlyUpgrade extends Upgrade implements Game.HeavenlyUpgrade {\n\tposX: number\n\tposY: number\n\n\tpool = \"prestige\" as const\n\t/**\n\t * Creates a heavenly upgrade\n\t * @param name The name for it\n\t * @param desc The description of it\n\t * @param price The price of in (in Heavenly Chips)\n\t * @param icon The icon for it\n\t * @param position The position of it on the heavenly map screen\n\t * @param parents It's parents, can be mixed ID's with names\n\t * @param buyFunc The function which gets called on being bought\n\t */\n\tconstructor(\n\t\tname: string,\n\t\tdesc: CommonValue<string>,\n\t\tprice: CommonValue<number>,\n\t\ticon: CommonValue<Game.Icon>,\n\t\tposition: [number, number],\n\t\tparents: (string | number)[] = [\"Legacy\"],\n\t\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\t\tbuyFunc: () => void = (): void => {}\n\t) {\n\t\tsuper(name, desc, price, icon, buyFunc)\n\n\t\tthis.posX = position[0]\n\t\tthis.posY = position[1]\n\n\t\tthis.parents = parents.map(id => Game.Upgrades[id] || Game.UpgradesById[id])\n\n\t\tGame.PrestigeUpgrades.push(this)\n\t\tGame.UpgradePositions[this.id] = position\n\t}\n}\n\nfunction isFortune<Tier extends string | number>(\n\tupgrade: TieredUpgrade<Tier | \"fortune\">\n): upgrade is TieredUpgrade<\"fortune\"> {\n\treturn upgrade.tier === \"fortune\"\n}\n\nexport class TieredUpgrade<Tier extends string | number = string | number>\n\textends Upgrade\n\timplements Game.TieredUpgradeClass<Tier> {\n\tbuildingTie: Game.Object\n\tbuildingTie1: Game.Object\n\ttier: Tier\n\tpool: \"\"\n\n\t/**\n\t * Creates a tiered upgrade\n\t * @param name The name of the tiered upgrade\n\t * @param quote The description of the upgrade\n\t * @param building The building it boosts\n\t * @param tier The upgrade's tier, is the id of the tier, ex. `2`(Berrylium), `7`(Jetmint), `synergy2`(Synergy II), etc.\n\t */\n\tconstructor(\n\t\tname: string,\n\t\tquote: string,\n\t\tbuilding: Game.Object | string,\n\t\ttier: Tier\n\t) {\n\t\tif (typeof building === \"string\") building = Game.Objects[building]\n\t\tsuper(\n\t\t\tname,\n\t\t\t`${toSentenseCase(\n\t\t\t\tbuilding.plural\n\t\t\t)} are <b>twice</b> as efficient.<q>${quote}</q>`,\n\t\t\tbuilding.basePrice * Game.Tiers[tier].price,\n\t\t\tGame.GetIcon(building.name, tier)\n\t\t)\n\n\t\tGame.SetTier(building.name, tier)\n\n\t\tthis.buildingTie1 = building\n\t\tif (isFortune(this)) {\n\t\t\tthis.order = 19000\n\t\t\tbuilding.fortune = this\n\t\t}\n\t\tif (!isNaN(parseInt(tier.toString()))) {\n\t\t\ttier = parseInt(tier.toString()) as Tier\n\t\t}\n\t\tif (typeof tier === \"number\") {\n\t\t\tthis.order = (building.id + 1) * 100 + this.id / 1000\n\t\t\t// Manually patch order since Orteil doesn't like consistency\n\t\t\tthis.order -= Math.max(0, Math.min(building.id - 4, 3)) * 75\n\t\t\tif (building.id >= 8) this.order -= 75\n\t\t}\n\t\tif (tier === \"fortune\") Game.Tiers[tier].upgrades.push(this)\n\t\tbuilding.buyFunction.apply(building)\n\t}\n}\n\nexport class GrandmaSynergy extends Upgrade\n\timplements Game.GrandmaSynergyClass {\n\tbuildingTie: Game.Object\n\tpool: \"\"\n\t/**\n\t * Creates a grandma synergy upgrade\n\t * @param name The name for the upgrade(Usually something like \"_ Grandmas\")\n\t * @param quote The flavor text of the upgrade\n\t * @param buildingName The building to be tied with\n\t * @param grandmaPicture Optional, the picture of the grandma to use in grandma art\n\t */\n\tconstructor(\n\t\tname: string,\n\t\tquote: string,\n\t\tbuilding: Game.Object | string,\n\t\tgrandmaPicture?: string\n\t) {\n\t\tif (grandmaPicture) {\n\t\t\tif (!grandmaPicture.endsWith(\".png\"))\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Can't use the grandma picture URL \"${grandmaPicture}\", URL must end with .png`\n\t\t\t\t)\n\t\t\tgrandmaPicture = grandmaPicture.substring(0, grandmaPicture.length - 4)\n\t\t}\n\t\tif (typeof building === \"string\") building = Game.Objects[building]\n\t\tlet grandmaNumber: string | number = building.id - 1\n\t\tif (grandmaNumber === 1) grandmaNumber = \"grandma\"\n\t\telse grandmaNumber = `${grandmaNumber} grandmas`\n\t\tsuper(\n\t\t\tname,\n\t\t\t`Grandmas are <b>twice</b> as efficient. ${toSentenseCase(\n\t\t\t\tbuilding.plural\n\t\t\t)} gain <b>+1% CpS</b> per ${grandmaNumber}.<q>${quote}</q>`,\n\t\t\tbuilding.basePrice * Game.Tiers[2].price,\n\t\t\t[10, 9, \"\"],\n\t\t\tGame.Objects.Grandma.redraw\n\t\t)\n\t\tbuilding.grandma = this\n\t\tthis.buildingTie = building\n\t\tthis.order = 250 + this.id / 1000\n\t\tif (building.id >= 12) this.order += 5\n\t\tGame.GrandmaSynergies.push(this.name)\n\t\tif (grandmaPicture) {\n\t\t\tmaster.hooks.on(\"grandmaPic\", src => {\n\t\t\t\tif (this.bought) return [...src, grandmaPicture] as string[]\n\t\t\t\telse return src\n\t\t\t})\n\t\t}\n\t\tGame.Objects.Grandma.redraw()\n\t\tbuilding.buyFunction.apply(building)\n\t}\n}\n\nexport class SynergyUpgrade<Tier extends string> extends Upgrade\n\timplements Game.SynergyUpgradeClass<Tier> {\n\tbuildingTie1: Game.Object\n\tbuildingTie2: Game.Object\n\ttier: Tier\n\tpool: \"\"\n\t/**\n\t * Creates a synergy upgrade\n\t * @param name The name for the upgrade\n\t * @param quote The flavor text for it\n\t * @param building1 The first building, note that the icon will be inherited from this\n\t * @param building2 The second building\n\t * @param tier The upgrade's tier, is the id of the tier, ex. `synergy1`(Synergy I), `synergy2`(Synergy II), etc. **Warning: The tier must have a req field**\n\t */\n\tconstructor(\n\t\tname: string,\n\t\tquote: string,\n\t\tbuilding1: Game.Object | string,\n\t\tbuilding2: Game.Object | string,\n\t\ttier: Tier\n\t) {\n\t\tif (typeof building1 === \"string\") building1 = Game.Objects[building1]\n\t\tif (typeof building2 === \"string\") building2 = Game.Objects[building2]\n\t\tconst icon = Game.GetIcon(building1.name, tier)\n\t\t//Swap\n\t\tif (building1.basePrice > building2.basePrice) {\n\t\t\tconst temp = building1\n\t\t\tbuilding1 = building2\n\t\t\tbuilding2 = temp\n\t\t}\n\t\tsuper(\n\t\t\tname,\n\t\t\t`${toSentenseCase(\n\t\t\t\tbuilding1.plural\n\t\t\t)} gain <b>+5% CpS</b> per ${building2.name.toLowerCase()}.<br>${toSentenseCase(\n\t\t\t\tbuilding2.plural\n\t\t\t)} gain <b>+0.1% CpS</b> per \n\t\t\t${building1.name.toLowerCase()}.<q>${quote}</q>`,\n\t\t\t(building1.basePrice * 10 + building2.basePrice * 1) *\n\t\t\t\tGame.Tiers[tier].price,\n\t\t\ticon\n\t\t)\n\t\tthis.tier = tier\n\t\tthis.buildingTie1 = building1\n\t\tthis.buildingTie2 = building2\n\t\tthis.order = 5000 + this.id / 1000\n\t\tbuilding1.synergies.push(this)\n\t\tbuilding2.synergies.push(this)\n\n\t\tGame.Tiers[tier].upgrades.push(this)\n\t\tGame.RebuildUpgrades()\n\t\tbuilding1.buyFunction.apply(building1)\n\t}\n}\n\n/**\n * Early cursor logs which don't follow any pattern\n */\nconst cursorEarlyLogs = [5, 7, 8, 9, 10]\n\nexport class CursorUpgrade<Tier extends string | number> extends Upgrade\n\timplements Game.GenericTieredUpgrade<Tier> {\n\tpool: \"\"\n\ttier: Tier\n\t/**\n\t * Creates an upgrade which powers up the Thousand Fingers upgrade\n\t * @param name Name of the upgrade\n\t * @param quote Quote (flavour text) of it\n\t * @param tier The upgrade's tier, is the id of the tier, ex. `2`(Berrylium), `7`(Jetmint), `synergy2`(Synergy II), etc.\n\t * @param power The multiplier of of thousand fingers, if omitted, 20 by default, which is the multiplier of later cursor upgrades\n\t */\n\tconstructor(name: string, quote: string, tier: Tier, power = 20) {\n\t\tconst building = Game.Objects.Cursor\n\t\tconst tierPow = parseInt(tier.toString())\n\t\tsuper(\n\t\t\tname,\n\t\t\t`Multiplies the gain from Thousand fingers by <b>${power}</b>.<q>${quote}</q>`,\n\t\t\tGame.Tiers[tier].special || isNaN(tierPow)\n\t\t\t\t? building.basePrice * Game.Tiers[tier].price\n\t\t\t\t: // Calculate the cursor price\n\t\t\t\t  10 **\n\t\t\t\t\t\t// Early logs kinda don't really follow anything\n\t\t\t\t\t\t(cursorEarlyLogs[\n\t\t\t\t\t\t\t// Get the latest one\n\t\t\t\t\t\t\tMath.min(tierPow - 4, cursorEarlyLogs.length - 1)\n\t\t\t\t\t\t] +\n\t\t\t\t\t\t\t// The normal *10^3 for all other stuffs\n\t\t\t\t\t\t\tMath.max(tierPow - 8, 0) * 3),\n\t\t\tGame.GetIcon(building.name, tier)\n\t\t)\n\t\tthis.tier = tier\n\t\tthis.pool = \"\"\n\t\tthis.order = 100 + this.id / 1000\n\t\tmaster.on(\"cursorFingerMult\", mult => (this.bought ? mult * power : mult))\n\t\tif (!Game.Tiers[tier].special && !isNaN(tierPow))\n\t\t\tmaster.buildingHooks.Cursor.on(\"buy\", () => {\n\t\t\t\tif (building.amount >= (tierPow === 4 ? 25 : (tierPow - 4) * 50))\n\t\t\t\t\tGame.Unlock(this.name)\n\t\t\t})\n\t\tif (tier === \"fortune\") Game.Tiers[tier].upgrades.push(this)\n\t\tGame.Objects.Cursor.buyFunction.apply(Game.Objects.Cursor)\n\t}\n}\n\n/**\n * Exceptions when the change kitten cost is not 3 (in log10)\n */\nexport const kittenPriceRules = { 1: 5, 2: 4, 4: 4, default: 3 }\n\n/**\n * Calculates the cost of a kitten, based on price rules and tier.\n * @param tier The tier, must be a number\n */\nexport function computeKittenCost(tier: number): number {\n\tlet cost = 1\n\tfor (let i = 1; i <= tier; i++)\n\t\tcost += kittenPriceRules[i] ?? kittenPriceRules.default\n\treturn 9 * 10 ** cost\n}\n\n/**\n * The pattern of kitten powers, might be inaccurate on further versions.\n * (Loops if tier is beyond length)\n */\nconst kittenPowerPattern = [\n\t0.1,\n\t0.125,\n\t0.15,\n\t0.175,\n\t0.2,\n\t0.2,\n\t0.2,\n\t0.2,\n\t0.2,\n\t0.175,\n\t0.15,\n\t0.125,\n\t0.115,\n]\n\nexport class KittenUpgrade<Tier extends string | number> extends Upgrade\n\timplements Game.KittenUpgrade<Tier> {\n\tkitten = true as const\n\tpool = \"\" as const\n\t/**\n\t * Creates a new kitten upgrade, which boosts CpS based on achievement amount\n\t * @param name Name of the upgrade\n\t * @param quote The quote (flavour text) of it\n\t * @param tier The upgrade's tier, is the id of the tier, ex. `2`(Berrylium), `7`(Jetmint), `synergy2`(Synergy II), etc.\n\t * @param power The multiplier of CpS per 25 achievement, if not set, automatically calculated\n\t * @param cost The cost of the upgrade, if not set, automatically calculated\n\t * @param milkUnlockAmount The milk progess (achievements / 25) required to unlock the upgrade, if not set, automatically calculated\n\t */\n\tconstructor(\n\t\tname: string,\n\t\tquote: string,\n\t\tpublic tier: Tier,\n\t\tpower = Game.Tiers[tier].special || isNaN(parseInt(tier.toString()))\n\t\t\t? null\n\t\t\t: kittenPowerPattern[\n\t\t\t\t\t(parseInt(tier.toString()) - 1) % (kittenPowerPattern.length - 1)\n\t\t\t  ],\n\t\tcost?: number,\n\t\tmilkUnlockAmount = Game.Tiers[tier].special ||\n\t\tisNaN(parseInt(tier.toString()))\n\t\t\t? null\n\t\t\t: tier === 1\n\t\t\t? 0.5\n\t\t\t: // Trust me\n\t\t\t  (tier as number) - 1\n\t) {\n\t\tsuper(\n\t\t\tname,\n\t\t\t`You gain <b>more CpS</b> the more milk you have.<q>${quote}</q>`,\n\t\t\tGame.Tiers[tier].special || isNaN(parseInt(tier.toString()))\n\t\t\t\t? cost ?? 0\n\t\t\t\t: computeKittenCost(tier as number), //Just trust me.\n\t\t\tGame.GetIcon(\"Kitten\", tier)\n\t\t)\n\t\tif (power === null)\n\t\t\tconsole.warn(\n\t\t\t\t\"Please make sure to specify the power if the kitten tier is special\"\n\t\t\t)\n\t\tif (\n\t\t\t(Game.Tiers[tier].special || isNaN(parseInt(tier.toString()))) &&\n\t\t\tcost === undefined\n\t\t)\n\t\t\tconsole.warn(\n\t\t\t\t\"Please make sure to specify the cost if the kitten tier is special\"\n\t\t\t)\n\t\tif (milkUnlockAmount !== null)\n\t\t\tmaster.on(\"logic\", () => {\n\t\t\t\tif (Game.milkProgress >= milkUnlockAmount) Game.Unlock(this.name)\n\t\t\t})\n\t\tthis.order = 20000 + this.id / 1000\n\t\tif (power !== null)\n\t\t\tmaster.on(\"rawCpsMult\", mult => {\n\t\t\t\tconst addMult = this.bought\n\t\t\t\t\t? 1 + Game.milkProgress * power * master.hiddenMilkMult\n\t\t\t\t\t: 1\n\t\t\t\tGame.cookiesMultByType[\"kittens\"] *= addMult\n\n\t\t\t\treturn mult * addMult\n\t\t\t})\n\t\tGame.UpgradesByPool[\"kitten\"].push(this)\n\t\tif (tier === \"fortune\") Game.Tiers[tier].upgrades.push(this)\n\t}\n}\n\nexport class MouseUpgrade<Tier extends string | number> extends Upgrade\n\timplements Game.GenericTieredUpgrade<Tier> {\n\tpool = \"\" as const\n\t/**\n\t * Creates an upgrade which powers up the cookies per click\n\t * @param name Name of the upgrade\n\t * @param quote Quote (flavour text) of it\n\t * @param tier The upgrade's tier, is the id of the tier, ex. `2`(Berrylium), `7`(Jetmint), `synergy2`(Synergy II), etc.\n\t * @param power The multiplier of CpS per click, `0.01` by default, which is what all other cursor upgrades give\n\t */\n\tconstructor(name: string, quote: string, public tier: Tier, power = 1) {\n\t\tsuper(\n\t\t\tname,\n\t\t\t`Clicking gains <b>+${power}% of your CpS</b>.<q>${quote}</q>`,\n\t\t\t10 ** (3 + parseInt(tier.toString()) * 2),\n\t\t\tGame.GetIcon(\"Mouse\", tier) // Injected in `basegame.ts`\n\t\t)\n\t\tconst tierPow = parseInt(tier.toString())\n\t\tthis.order = 150 + this.id / 1000\n\t\tmaster.on(\"cpcAdd\", add =>\n\t\t\tthis.bought ? add + (Game.cookiesPs * power) / 100 : add\n\t\t)\n\t\tif (!Game.Tiers[tier].special && !isNaN(tierPow))\n\t\t\tmaster.on(\"check\", () => {\n\t\t\t\tif (Game.handmadeCookies >= 10 ** (1 + tierPow * 2))\n\t\t\t\t\tGame.Unlock(this.name)\n\t\t\t})\n\t\tif (tier === \"fortune\") Game.Tiers[tier].upgrades.push(this)\n\t}\n}\n\nexport class CookieUpgrade extends Upgrade implements Game.CookieUpgrade {\n\tpool = \"cookie\" as const\n\t/**\n\t * Create an upgrade which multiplier cookie production\n\t * @param name Name of the cookie\n\t * @param quote Quote (flavour text) of it\n\t * @param price The price of the cookie\n\t * @param icon The icon of it\n\t * @param power The multiplier of CpS, in %, so `5` means +5% CpS, etc.\n\t * @param req Some optional conditions, etc. the season, the upgrade required, or if the upgrade can be unlocked naturally at all to unlock this\n\t * (Note: All cookies which aren't locked *require* you to have 1/20 of it's cost to be unlocked)\n\t * @param order Position of the cookie in the list, Most cookies have 10020 by default, cookies from boxes and special cookies have different orders.\n\t */\n\tconstructor(\n\t\tname: string,\n\t\tquote: string,\n\t\tprice: CommonValue<number>,\n\t\ticon: Game.Icon,\n\t\tpublic power: CommonValue<number>,\n\t\treq?: { require?: string; season?: string; locked?: boolean },\n\t\torder?: number\n\t) {\n\t\tsuper(\n\t\t\tname,\n\t\t\t`Cookie production multiplier <b>+${Beautify(\n\t\t\t\ttypeof power === \"function\" ? power() : power,\n\t\t\t\t1\n\t\t\t)}%</b>.<q>${quote}</q>`,\n\t\t\tprice,\n\t\t\ticon\n\t\t)\n\t\tthis.order = (order ?? master.cookieOrder ?? 10020) + this.id / 1000\n\t\tthis.unlockAt = {\n\t\t\tname,\n\t\t\tcookies: (typeof price === \"function\" ? price() : price) / 20,\n\t\t\trequire: req?.require,\n\t\t\tseason: req?.season,\n\t\t}\n\t\tGame.UnlockAt.push(this.unlockAt)\n\t\tGame.UpgradesByPool.cookie.push(this)\n\t\tGame.cookieUpgrades.push(this)\n\t}\n}\n", "import master from \"./vars\"\n// Resolve aliases\n/**\n * Currently defined alias\n */\nexport const aliases: Record<string, string> = {}\nlet steppedAliases: string[] = []\n/**\n * Creates an alias from an old name to a new one\n * @param oldName The current name\n * @param aliasName The new, alias name\n */\nexport function alias(oldName: string, aliasName: string): void {\n\taliases[oldName] = aliasName\n}\n\n/**\n * Deletes an alias from the name\n * @param name The name to remove an alias from\n */\nexport function unalias(name: string): void {\n\tdelete alias[name]\n}\n\n/**\n * Resolves an aliased name\n * @param name The name to be resolved\n */\nexport function resolveAlias(name: string): string {\n\tif (steppedAliases.includes(name)) throw new Error(\"Recursive alias\")\n\tsteppedAliases.push(name)\n\tif (name in aliases) return resolveAlias(aliases[name])\n\tsteppedAliases = []\n\treturn name\n}\n\n/**\n * A local helper to fetch an image from an image link\n * @param link The image URI\n */\nfunction generateImageFromLink(link: string): Promise<HTMLImageElement> {\n\treturn new Promise(resolve => {\n\t\tconst img = new Image()\n\t\timg.addEventListener(\"load\", (): void => {\n\t\t\tresolve(img)\n\t\t})\n\t\timg.crossOrigin = \"Anonymous\"\n\t\timg.src = link\n\t})\n}\n\n/**\n * A local helper to create a blob URI from a canvas buffer\n */\nfunction toBlobURI(buf: CanvasRenderingContext2D): Promise<string> {\n\treturn new Promise(resolve => {\n\t\tbuf.canvas.toBlob((blob: Blob) => {\n\t\t\tresolve(URL.createObjectURL(blob))\n\t\t})\n\t})\n}\n\n/**\n * A universal version of Icon which is not restricted to CC\n */\nexport type UniversalIcon = [number, number]\n/**\n * Relocates the icons on an iconsheets\n * @param link The link to the original file\n * @param icons The definition of iconName: iconPosition\n * @param matrix The matrix of icon names\n * @param iconSize The size of a single icon\n * @param size The size of the new spritesheet\n * @param postProcess Optional operations after the relink\n */\nfunction relink(\n\tlink: string,\n\ticons: Record<string, UniversalIcon>,\n\tmatrix: string[][] | string[],\n\ticonSize: [number, number],\n\tsize: [number, number],\n\tpostProcess?: (ctx: CanvasRenderingContext2D) => void | Promise<void>\n): Promise<string> {\n\treturn new Promise(resolve => {\n\t\tif (!(matrix[0] instanceof Array)) matrix = [matrix as string[]]\n\t\tmatrix = matrix as string[][]\n\t\t//Collect references\n\t\tconst references: Record<string, Game.Icon> = {}\n\t\tfor (const y in matrix)\n\t\t\tfor (const x in matrix[y]) {\n\t\t\t\t// Ignore if falsy\n\t\t\t\tif (!matrix[y][x]) continue\n\t\t\t\tmatrix[y][x] = matrix[y][x].toString().toLowerCase()\n\t\t\t\tif (!(matrix[y][x] in icons)) throw new Error(\"Invalid icon name\")\n\t\t\t\treferences[matrix[y][x]] = [parseInt(x), parseInt(y)]\n\t\t\t}\n\t\t//Draw new column\n\t\tconst buffer = document\n\t\t\t.createElement(\"canvas\")\n\t\t\t.getContext(\"2d\") as CanvasRenderingContext2D\n\t\tconst img = new Image()\n\t\timg.addEventListener(\"load\", (): void => {\n\t\t\tbuffer.canvas.width = size[0]\n\t\t\tbuffer.canvas.height = size[1]\n\t\t\tfor (const i in references)\n\t\t\t\tbuffer.drawImage(\n\t\t\t\t\timg,\n\t\t\t\t\treferences[i][0] * iconSize[0],\n\t\t\t\t\treferences[i][1] * iconSize[1],\n\t\t\t\t\ticonSize[0],\n\t\t\t\t\ticonSize[1],\n\t\t\t\t\ticons[i][0] * iconSize[0],\n\t\t\t\t\ticons[i][1] * iconSize[1],\n\t\t\t\t\ticonSize[0],\n\t\t\t\t\ticonSize[1]\n\t\t\t\t)\n\t\t\tconst postPostProcess = (): void => {\n\t\t\t\ttoBlobURI(buffer).then(resolve)\n\t\t\t}\n\t\t\tlet ret: void | Promise<void>\n\t\t\tif (postProcess) ret = postProcess(buffer)\n\t\t\tif (ret instanceof Promise) ret.then(postPostProcess)\n\t\t\telse postPostProcess()\n\t\t})\n\t\timg.crossOrigin = \"Anonymous\"\n\t\timg.src = link\n\t})\n}\n\n/**\n * The amount of column relinks a URI has been to\n */\nconst columnRelinkAmount: Record<string, number> = {}\n\n/**\n * Additional icons which aren't defined with tiers\n */\nexport const extraColumnIcons: Record<string, UniversalIcon> = {\n\t\"3d\": [0, 21],\n\tmilestone1: [0, 22],\n\tmilestone2: [0, 23],\n\tmilestone3: [0, 24],\n\tkrumblor: [0, 25],\n\tlevel1: [0, 26],\n\tlevel2: [0, 27],\n}\n/**\n * Relocates the icons for a column and automatically aliases it\n * @param link The link to the original, unordered iconsheet\n * @param matrix The matrix of the names of the icon tiers\n * Valid tier names are:\n * * Tier ids: `1`, `5`, `7`, etc.\n * * Tier names: `\"jetmint\"`, `\"plain\"`, etc.\n * * Non-standard tier icon tiers: `\"3d\"`, `\"milestone1\"`, `\"milestone2\"`, `\"milestone3\"`, `\"krumblor\"`, `\"level1\"`, `\"level2\"`\n * @param offset The icon X to offset the column\n * @param followAlias If true, the original image URI will be de-aliased (`relinkColumn`, `relinkRow` and `patchIconsheet` create an alias!)\n */\nexport async function relinkColumn(\n\tlink: string,\n\tmatrix: string[] | string[][],\n\toffset?: number,\n\tfollowAlias = false\n): Promise<void> {\n\t// Automatically offset the X by 1 for each relink\n\tif (offset === undefined) {\n\t\tif (!columnRelinkAmount[link]) columnRelinkAmount[link] = 0\n\t\toffset = columnRelinkAmount[link]++\n\t}\n\tconst columnIcons: Record<string, UniversalIcon> = {}\n\tfor (const i in extraColumnIcons) {\n\t\tcolumnIcons[i] = [offset, extraColumnIcons[i][1]]\n\t}\n\t// Automatically generate normal tiers\n\tfor (const i in Game.Tiers)\n\t\tcolumnIcons[Game.Tiers[i].name.toLowerCase()] = columnIcons[\n\t\t\ti.toString()\n\t\t] = [offset, Game.Tiers[i].iconRow]\n\talias(\n\t\tlink,\n\t\tawait relink(\n\t\t\tfollowAlias ? resolveAlias(link) : link,\n\t\t\tcolumnIcons,\n\t\t\tmatrix,\n\t\t\t[48, 48],\n\t\t\t[\n\t\t\t\t(offset + 1) * 48,\n\t\t\t\t(Object.values(columnIcons).reduce(\n\t\t\t\t\t(acc, value) => Math.max(acc, value[1]),\n\t\t\t\t\t-Infinity\n\t\t\t\t) +\n\t\t\t\t\t1) *\n\t\t\t\t\t48,\n\t\t\t],\n\t\t\tctx => {\n\t\t\t\treturn new Promise(resolve => {\n\t\t\t\t\t// If not first relink, append to original image\n\t\t\t\t\tif (resolveAlias(link) !== link) {\n\t\t\t\t\t\tconst img = new Image()\n\t\t\t\t\t\timg.addEventListener(\"load\", (): void => {\n\t\t\t\t\t\t\tctx.drawImage(img, 0, 0)\n\t\t\t\t\t\t\tresolve()\n\t\t\t\t\t\t})\n\t\t\t\t\t\timg.src = resolveAlias(link)\n\t\t\t\t\t\timg.crossOrigin = \"Anonymous\"\n\t\t\t\t\t} else resolve()\n\t\t\t\t})\n\t\t\t}\n\t\t)\n\t)\n}\n\n/**\n * The amount of row relinks a URI has been to\n */\nconst rowRelinkAmount: Record<string, number> = {}\n\n/**\n * Additional icons which aren't defined with buildings\n */\nexport const extraRowIcons: Record<string, UniversalIcon> = {\n\tresearch: [9, 0],\n\tcookie: [10, 0],\n\tmouse: [11, 0],\n\tmulticursor: [12, 0],\n\tkitten: [18, 0],\n}\n/**\n * Relocates the icons for a row and automatically aliases it\n * @param link The link to the original, unordered iconsheet\n * @param matrix The matrix of the names of the icon types\n * Valid tier types are:\n * * Building ids: `1, `5`, `7`, etc.\n * * Building names: `\"cursor\"`, `\"farm\"`, etc.\n * * Non-standard tier icon tiers: `\"research\"`, `\"cookie\"`, `\"mouse\"`, `\"multicursor\"`, `\"kitten\"`\n * @param offset The icon X to offset the column\n * @param followAlias If true, the original image URI will be de-aliased (`relinkColumn`, `relinkRow` and `patchIconsheet` create an alias!)\n */\nexport async function relinkRow(\n\tlink: string,\n\tmatrix: string[] | string[][],\n\toffset?: number,\n\tfollowAlias = false\n): Promise<void> {\n\tif (offset === undefined) {\n\t\tif (!rowRelinkAmount[link]) rowRelinkAmount[link] = 0\n\t\toffset = rowRelinkAmount[link]++\n\t}\n\tconst rowIcons: Record<string, UniversalIcon> = {}\n\tfor (const i in extraRowIcons) {\n\t\trowIcons[i] = [extraRowIcons[i][0], offset]\n\t}\n\t// Automatically generate normal buildings\n\tfor (const i in Game.ObjectsById)\n\t\trowIcons[Game.ObjectsById[i].single.toLowerCase()] = rowIcons[i] = [\n\t\t\tGame.ObjectsById[i].iconColumn,\n\t\t\toffset,\n\t\t]\n\talias(\n\t\tlink,\n\t\tawait relink(\n\t\t\tfollowAlias ? resolveAlias(link) : link,\n\t\t\trowIcons,\n\t\t\tmatrix,\n\t\t\t[48, 48],\n\t\t\t[\n\t\t\t\t(Object.values(rowIcons).reduce(\n\t\t\t\t\t(acc, value) => Math.max(acc, value[0]),\n\t\t\t\t\t-Infinity\n\t\t\t\t) +\n\t\t\t\t\t1) *\n\t\t\t\t\t48,\n\t\t\t\t(offset + 1) * 48,\n\t\t\t],\n\t\t\tctx => {\n\t\t\t\treturn new Promise(resolve => {\n\t\t\t\t\t// If not first relink, append to original image\n\t\t\t\t\tif (resolveAlias(link) !== link) {\n\t\t\t\t\t\tconst img = new Image()\n\t\t\t\t\t\timg.addEventListener(\"load\", (): void => {\n\t\t\t\t\t\t\tctx.drawImage(img, 0, 0)\n\t\t\t\t\t\t\tresolve()\n\t\t\t\t\t\t})\n\t\t\t\t\t\timg.src = resolveAlias(link)\n\t\t\t\t\t\timg.crossOrigin = \"Anonymous\"\n\t\t\t\t\t} else resolve()\n\t\t\t\t})\n\t\t\t}\n\t\t)\n\t)\n}\n\n/**\n * Patches an iconsheet with replacements\n * @param link The link to the original, unpatched iconsheet\n * @param replacements The replacements to make, first element in tuple is the original position,\n * second is the icon to replace with\n * @param followAlias If true, the original image URI will be de-aliased (`relinkColumn`, `relinkRow` and `patchIconsheet` create an alias!)\n */\nexport async function patchIconsheet(\n\tlink: string,\n\treplacements: [UniversalIcon, Game.Icon][],\n\tfollowAlias = true\n): Promise<void> {\n\t// First, create a canvas with the original image\n\tconst buffer = document\n\t\t.createElement(\"canvas\")\n\t\t.getContext(\"2d\") as CanvasRenderingContext2D\n\tconst ogImg = await generateImageFromLink(\n\t\tfollowAlias ? resolveAlias(link) : link\n\t)\n\tconst maxSize = [ogImg.width, ogImg.height]\n\t// Get the size of the output canvas\n\tfor (const place of replacements) {\n\t\tif (place[0][0] * 48 > maxSize[0]) maxSize[0] = place[0][0] * 48\n\t\tif (place[0][1] * 48 > maxSize[1]) maxSize[1] = place[0][1] * 48\n\t}\n\tbuffer.canvas.width = maxSize[0]\n\tbuffer.canvas.height = maxSize[1]\n\tbuffer.drawImage(ogImg, 0, 0)\n\t// Generate a cache\n\tconst replacementCache: Record<string, HTMLImageElement> = {}\n\tfor (const replacement of replacements) {\n\t\t// Little trick, here, if icon [2] is \"\", go to \"img/icons.png\" instead of `master.iconLink`\n\t\tconst iconLink = resolveAlias(\n\t\t\t(replacement[1][2] ?? master.iconLink) || \"img/icons.png\"\n\t\t)\n\t\tif (!replacementCache[iconLink])\n\t\t\treplacementCache[iconLink] = await generateImageFromLink(iconLink)\n\t\t// Clear the icon beforehand\n\t\tbuffer.clearRect(replacement[0][0] * 48, replacement[0][1] * 48, 48, 48)\n\n\t\tbuffer.drawImage(\n\t\t\treplacementCache[iconLink],\n\t\t\treplacement[1][0] * 48,\n\t\t\treplacement[1][1] * 48,\n\t\t\t48,\n\t\t\t48,\n\t\t\treplacement[0][0] * 48,\n\t\t\treplacement[0][1] * 48,\n\t\t\t48,\n\t\t\t48\n\t\t)\n\t}\n\talias(link, await toBlobURI(buffer))\n}\n\nexport function resolveIcon(icon: Game.Icon): Game.Icon {\n\ticon = [...icon]\n\tif (icon[2] === undefined || icon[2] === null) icon[2] = master.iconLink\n\ticon[2] = resolveAlias(icon[2])\n\treturn icon\n}\n", "/**\n * The common type for a value, can be either the value or a function that returns a value with the type.\n */\nexport type CommonValue<T> = T | (() => T)\n/**\n * A helper function which converts a common value to a value\n * @param value The common value to convert\n * @helper\n */\nexport function getValue<T>(value: CommonValue<T>): T {\n\tif (value instanceof Function) return value()\n\treturn value\n}\n/**\n * A helper function which escapes special regex characters.\n * @param str The string to escape\n * @helper\n */\nexport function escapeRegExp(str: string): string {\n\t// eslint-disable-next-line no-useless-escape\n\treturn str.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\")\n}\n/**\n * The parameters of an injection, in order: `source`, `target`, `where`\n */\nexport type InjectParams = [\n\tstring | RegExp | null,\n\tstring,\n\t\"before\" | \"replace\" | \"after\"\n]\n/**\n * A helper helper function, which does a single inject to code\n * @param source The code to perform the inject on\n * @param config The configuration of the inject\n * @helper\n * @helperhelper\n */\nfunction doSingleInject(source: string, config: InjectParams): string {\n\tconst sliceMode = config[0] === null\n\t// Do this to mute typescript silly wrong errors\n\tlet regex = new RegExp(\"\")\n\tif (config[0] !== null) {\n\t\tif (typeof config[0] === \"string\")\n\t\t\tregex = new RegExp(escapeRegExp(config[0]), \"g\")\n\t\telse regex = config[0]\n\t\tif (!regex.test(source)) console.warn(\"Nothing to inject.\")\n\t}\n\n\tconst findStart = /(\\)[^{]*{)/\n\tconst findEnd = /(}?)$/\n\n\tswitch (config[2]) {\n\t\tcase \"before\":\n\t\t\tif (sliceMode) source = source.replace(findStart, `$1${config[1]}`)\n\t\t\telse source = source.replace(regex, `${config[1]}${config[0]}`)\n\t\t\tbreak\n\t\tcase \"replace\":\n\t\t\tif (sliceMode) source = config[1]\n\t\t\telse source = source.replace(regex, config[1])\n\t\t\tbreak\n\t\tcase \"after\":\n\t\t\tif (sliceMode) source = source.replace(findEnd, `${config[1]}$1`)\n\t\t\telse source = source.replace(regex, `${config[0]}${config[1]}`)\n\t\t\tbreak\n\t\tdefault:\n\t\t\tthrow new Error('where Parameter must be \"before\", \"replace\" or \"after\"')\n\t}\n\treturn source\n}\n/**\n * A helper function which replaces(or appends) code in a function, returning the new function, and it's eval free!\n * @param func The source function\n * @param source What to replace, can be null for slicing\n * @param target What to put instead of (or before/after) the source\n * @param where Where to insert or replace your injection\n * @param context The optional context to use\n * @helper\n */\nexport function injectCode<\n\tT extends\n\t\t| ((...args: unknown[]) => unknown)\n\t\t| (new (...args: unknown[]) => unknown)\n>(\n\tfunc: T,\n\tsource: string | RegExp | null,\n\ttarget: string,\n\twhere: \"before\" | \"replace\" | \"after\",\n\tcontext: object = {}\n): T {\n\tconst newFunc = Function(\n\t\t...Object.keys(context),\n\t\t`return (${doSingleInject(func.toString(), [source, target, where])})`\n\t)(...Object.values(context))\n\tnewFunc.prototype = func.prototype\n\treturn newFunc\n}\n\n/**\n * A helper function which replaces(or appends) code in a function, returning the new function, and it's eval free!\n * @param func The source function\n * @param injections The injections to apply, the parameters of an injection, in order: `source`, `target`, `where`\n * @param context The optional context to use\n * @helper\n */\nexport function injectCodes<\n\tT extends\n\t\t| ((...args: unknown[]) => unknown)\n\t\t| (new (...args: unknown[]) => unknown)\n>(func: T, injections: InjectParams[], context: object = {}): T {\n\tlet newStr = func.toString()\n\tfor (const injection of injections) newStr = doSingleInject(newStr, injection)\n\tconst newFunc = Function(\n\t\t...Object.keys(context),\n\t\t`return (${newStr})`\n\t)(...Object.values(context))\n\tnewFunc.prototype = func.prototype\n\treturn newFunc\n}\n/**\n * Applies all props to an object via mutating\n * @param targObj The object which will be mutated\n * @param srcObj The object which properties will be applied to the target object\n */\n\nexport function applyAllProps(targObj: object, srcObj: object): void {\n\tfor (const i in srcObj) targObj[i] = srcObj[i]\n}\n\n/**\n * Converts a string to sentense case, AKA first letter upper, all next lower\n * @param string\n */\nexport function toSentenseCase(string: string): string {\n\treturn string.charAt(0).toUpperCase() + string.slice(1).toLowerCase()\n}\n\n/**\n * A strongly typed `hasOwnProperty`\n * @helper\n */\nexport function hasOwnProperty<X extends object, Y extends PropertyKey>(\n\tobj: X,\n\tprop: Y\n): obj is X & Record<Y, unknown> {\n\t// eslint-disable-next-line no-prototype-builtins\n\treturn obj.hasOwnProperty(prop)\n}\n/**\n * Creates a roman numeral from a number\n * @param num The number to convert\n * @helper\n */\nexport function toRomanNumeral(num: number): string {\n\tconst lookup = [\n\t\t[1000, \"M\"],\n\t\t[900, \"CM\"],\n\t\t[500, \"D\"],\n\t\t[400, \"CD\"],\n\t\t[100, \"C\"],\n\t\t[90, \"XC\"],\n\t\t[50, \"L\"],\n\t\t[40, \"XL\"],\n\t\t[10, \"X\"],\n\t\t[9, \"IX\"],\n\t\t[5, \"V\"],\n\t\t[4, \"IV\"],\n\t\t[1, \"I\"],\n\t] as const\n\tlet roman = \"\"\n\n\tfor (const charType of lookup) {\n\t\twhile (num >= charType[0]) {\n\t\t\troman += charType[1]\n\t\t\tnum -= charType[0]\n\t\t}\n\t}\n\treturn roman\n}\n", "import master from \"./vars\"\nimport { Building } from \"./buildings\"\nimport { Upgrade } from \"./upgrade\"\nimport { applyAllProps, hasOwnProperty } from \"./helpers\"\nimport { Achievement } from \"./achievement\"\n\nexport const VANILLA_DRAGON_LEVEL_AMOUNT = Game.dragonLevels.length + 0\n\nexport const SAVE_VER = 1 as const\n/**\n * The save type for Cppkies\n */\nexport interface SaveType {\n\tsaveVer: typeof SAVE_VER\n\tmods: Record<string, ModSave>\n\tforeign: ModSave\n\tdragon: DragonSave\n}\n/**\n * Legacy save types of Cppkies\n */\n\nexport type LegacySave = {\n\tsaveVer: 0\n\tmods: Record<string, never>\n\tforeign: {\n\t\tbuildings: Record<string, BuildingSave>\n\t}\n\texists: true\n}\n\n/**\n * The save type for a mod\n */\nexport interface ModSave {\n\tbuildings: Record<string, BuildingSave>\n\tupgrades: Record<string, UpgradeSave>\n\tachievements: Record<string, AchievementSave>\n}\n/**\n * The save type for a building\n */\nexport interface BuildingSave {\n\tamount: number\n\tbought: number\n\tfree: number\n\ttotalCookies: number\n\tlevel: number\n\tmuted: number\n\tminigameSave: string\n}\n/**\n * The save type for an upgrade\n */\nexport interface UpgradeSave {\n\tunlocked: boolean\n\tbought: boolean\n}\n/**\n * The save type for an achievement\n */\nexport interface AchievementSave {\n\twon: boolean\n}\n/**\n * The save type for Krumblor\n */\ninterface DragonSave {\n\tlevel: number | \"sync\"\n\tauras: [number | \"sync\", number | \"sync\"]\n}\n\nfunction createDefaultSaveFragment(name: \"building\"): BuildingSave\nfunction createDefaultSaveFragment(name: \"upgrade\"): UpgradeSave\nfunction createDefaultSaveFragment(name: \"achievement\"): AchievementSave\nfunction createDefaultSaveFragment(name: \"dragon\"): DragonSave\nfunction createDefaultSaveFragment(name: \"mod\"): ModSave\nfunction createDefaultSaveFragment(name: string): unknown {\n\tswitch (name) {\n\t\tcase \"mod\":\n\t\t\treturn { achievements: {}, buildings: {}, upgrades: {} }\n\t\tcase \"dragon\":\n\t\t\treturn {\n\t\t\t\tlevel: \"sync\",\n\t\t\t\tauras: [\"sync\", \"sync\"],\n\t\t\t}\n\t\tcase \"achievement\":\n\t\t\treturn { won: false }\n\t\tcase \"upgrade\":\n\t\t\treturn {\n\t\t\t\tbought: false,\n\t\t\t\tunlocked: false,\n\t\t\t}\n\t\tcase \"building\":\n\t\t\treturn {\n\t\t\t\tamount: 0,\n\t\t\t\tbought: 0,\n\t\t\t\tfree: 0,\n\t\t\t\ttotalCookies: 0,\n\t\t\t\tlevel: 0,\n\t\t\t\tmuted: 0,\n\t\t\t\tminigameSave: \"\",\n\t\t\t}\n\t\tdefault:\n\t\t\tthrow new Error(\"Invalid fragment name!\")\n\t}\n}\n\nfunction createDefaultSave(): SaveType {\n\treturn {\n\t\tmods: {},\n\t\tforeign: createDefaultSaveFragment(\"mod\"),\n\t\tsaveVer: SAVE_VER,\n\t\tdragon: createDefaultSaveFragment(\"dragon\"),\n\t}\n}\n\nexport let save: SaveType = createDefaultSave()\n\n/**\n * Creates a save for Cppkies\n */\nexport function initSave(): void {\n\tmaster.save = save = createDefaultSave()\n}\n/**\n * Loads the building save data\n * @param building The building to load savedata for\n */\nexport function loadBuilding(building: Building): BuildingSave {\n\t//Use names because ID conflicts\n\treturn (\n\t\tsave.foreign.buildings[building.name] ||\n\t\tcreateDefaultSaveFragment(\"building\")\n\t)\n}\n/**\n * Saves a building\n * @param building The building to save\n */\nexport function saveBuilding({\n\tamount,\n\tbought,\n\tfree,\n\ttotalCookies,\n\tlevel,\n\tmuted,\n\tminigameSave,\n\tname,\n}: Building): void {\n\tsave.foreign.buildings[name] = {\n\t\tamount,\n\t\tbought,\n\t\tfree,\n\t\ttotalCookies,\n\t\tlevel,\n\t\tmuted,\n\t\tminigameSave,\n\t}\n}\n/**\n * Loads an upgrade\n * @param upgrade The upgrade to load\n */\nexport function loadUpgrade(upgrade: Upgrade): UpgradeSave {\n\treturn (\n\t\tsave.foreign.upgrades[upgrade.name] || createDefaultSaveFragment(\"upgrade\")\n\t)\n}\n/**\n * Saves an upgrade\n * @param upgrade The upgrade to save\n */\nexport function saveUpgrade(upgrade: Upgrade): void {\n\tsave.foreign.upgrades[upgrade.name] = {\n\t\tunlocked: !!upgrade.unlocked,\n\t\tbought: !!upgrade.bought,\n\t}\n}\n\n/**\n * Loads an achievement\n * @param upgrade The achievement to load\n */\nexport function loadAchievement(upgrade: Achievement): AchievementSave {\n\treturn (\n\t\tsave.foreign.achievements[upgrade.name] ||\n\t\tcreateDefaultSaveFragment(\"achievement\")\n\t)\n}\n/**\n * Saves an achievement\n * @param upgrade The achievement to save\n */\nexport function saveAchievement(upgrade: Achievement): void {\n\tsave.foreign.achievements[upgrade.name] = {\n\t\twon: !!upgrade.won,\n\t}\n}\nexport function loadDragon(): void {\n\tif (\n\t\tsave.dragon.level !== \"sync\" &&\n\t\tsave.dragon.level <= Game.dragonLevels.length - 1\n\t)\n\t\tGame.dragonLevel = save.dragon.level\n\tif (\n\t\tsave.dragon.auras[0] !== \"sync\" &&\n\t\tsave.dragon.auras[0] <= Object.keys(Game.dragonAuras).length - 1\n\t)\n\t\tGame.dragonAura = save.dragon.auras[0]\n\tif (\n\t\tsave.dragon.auras[1] !== \"sync\" &&\n\t\tsave.dragon.auras[1] <= Object.keys(Game.dragonAuras).length - 1\n\t)\n\t\tGame.dragonAura2 = save.dragon.auras[1]\n}\n\n/**\n * Loads everything\n */\nexport function loadAll(): void {\n\tfor (const building of master.customBuildings)\n\t\tapplyAllProps(building, loadBuilding(building))\n\n\tfor (const upgrade of master.customUpgrades) {\n\t\tapplyAllProps(upgrade, loadUpgrade(upgrade))\n\t\tif (upgrade.bought && Game.CountsAsUpgradeOwned(upgrade.pool))\n\t\t\tGame.UpgradesOwned++\n\t}\n\n\tfor (const achievement of master.customAchievements) {\n\t\tapplyAllProps(achievement, loadAchievement(achievement))\n\t\tif (achievement.won && Game.CountsAsAchievementOwned(achievement.pool))\n\t\t\tGame.AchievementsOwned++\n\t}\n\n\tloadDragon()\n}\n/**\n * Saves everything\n */\nexport function saveAll(): void {\n\tfor (const building of master.customBuildings) saveBuilding(building)\n\tfor (const upgrade of master.customUpgrades) saveUpgrade(upgrade)\n\tfor (const achievement of master.customAchievements)\n\t\tsaveAchievement(achievement)\n\t// Saving the dragon is in `injects/postInject.ts` due to no mod support\n}\n\nexport function applySave(newSave: unknown): SaveType {\n\tconst virtualSave = createDefaultSave()\n\t// Assert type\n\tif (typeof newSave !== \"object\" || newSave === null) return virtualSave\n\t// Assert save version\n\tif (\n\t\t!hasOwnProperty(newSave, \"saveVer\") ||\n\t\ttypeof newSave.saveVer !== \"number\" ||\n\t\tnewSave.saveVer > SAVE_VER\n\t)\n\t\treturn virtualSave\n\n\t// Assert mods\n\tfunction applyModSave(modSave: unknown): ModSave {\n\t\tconst virtualModSave = createDefaultSaveFragment(\"mod\")\n\t\t// Assert type\n\t\tif (typeof modSave !== \"object\" || modSave === null) return virtualModSave\n\t\t// Assert buildings\n\t\tif (\n\t\t\thasOwnProperty(modSave, \"buildings\") &&\n\t\t\ttypeof modSave.buildings === \"object\" &&\n\t\t\tmodSave.buildings !== null\n\t\t)\n\t\t\tfor (const buildingName in modSave.buildings) {\n\t\t\t\tconst building = modSave.buildings[buildingName]\n\t\t\t\tif (typeof building !== \"object\" || building === null) continue\n\t\t\t\tvirtualModSave.buildings[buildingName] = createDefaultSaveFragment(\n\t\t\t\t\t\"building\"\n\t\t\t\t)\n\t\t\t\tfor (const prop in building)\n\t\t\t\t\tif (\n\t\t\t\t\t\ttypeof virtualModSave.buildings[buildingName][prop] ===\n\t\t\t\t\t\ttypeof building[prop]\n\t\t\t\t\t)\n\t\t\t\t\t\tvirtualModSave.buildings[buildingName][prop] = building[prop]\n\t\t\t}\n\n\t\t// Assert upgrades and achievements\n\t\tif (\n\t\t\thasOwnProperty(modSave, \"upgrades\") &&\n\t\t\ttypeof modSave.upgrades === \"object\" &&\n\t\t\tmodSave.upgrades !== null\n\t\t)\n\t\t\tfor (const upgradeName in modSave.upgrades) {\n\t\t\t\tconst upgrade = modSave.upgrades[upgradeName]\n\t\t\t\tif (typeof upgrade !== \"object\" || upgrade === null) continue\n\t\t\t\tvirtualModSave.upgrades[upgradeName] = createDefaultSaveFragment(\n\t\t\t\t\t\"upgrade\"\n\t\t\t\t)\n\t\t\t\tfor (const prop in virtualModSave.upgrades[upgradeName])\n\t\t\t\t\tif (\n\t\t\t\t\t\ttypeof virtualModSave.upgrades[upgradeName][prop] ===\n\t\t\t\t\t\ttypeof upgrade[prop]\n\t\t\t\t\t)\n\t\t\t\t\t\tvirtualModSave.upgrades[upgradeName][prop] = upgrade[prop]\n\t\t\t}\n\n\t\tif (\n\t\t\thasOwnProperty(modSave, \"achievements\") &&\n\t\t\ttypeof modSave.achievements === \"object\" &&\n\t\t\tmodSave.achievements !== null\n\t\t)\n\t\t\tfor (const achievementName in modSave.achievements) {\n\t\t\t\tconst achievement = modSave.achievements[achievementName]\n\t\t\t\tif (typeof achievement !== \"object\" || achievement === null) continue\n\t\t\t\tvirtualModSave.achievements[\n\t\t\t\t\tachievementName\n\t\t\t\t] = createDefaultSaveFragment(\"achievement\")\n\t\t\t\tfor (const prop in virtualModSave.achievements[achievementName])\n\t\t\t\t\tif (\n\t\t\t\t\t\ttypeof virtualModSave.achievements[achievementName][prop] ===\n\t\t\t\t\t\ttypeof achievement[prop]\n\t\t\t\t\t)\n\t\t\t\t\t\tvirtualModSave.achievements[achievementName][prop] =\n\t\t\t\t\t\t\tachievement[prop]\n\t\t\t}\n\n\t\treturn virtualModSave\n\t}\n\n\t// `foreign` check\n\tif (!hasOwnProperty(newSave, \"foreign\"))\n\t\tvirtualSave.foreign = createDefaultSaveFragment(\"mod\")\n\telse virtualSave.foreign = applyModSave(newSave.foreign)\n\t// Dragon\n\tif (\n\t\thasOwnProperty(newSave, \"dragon\") &&\n\t\ttypeof newSave.dragon === \"object\" &&\n\t\tnewSave.dragon !== null\n\t) {\n\t\tif (\n\t\t\thasOwnProperty(newSave.dragon, \"level\") &&\n\t\t\t(typeof newSave.dragon.level === \"number\" ||\n\t\t\t\tnewSave.dragon.level === \"sync\")\n\t\t)\n\t\t\tvirtualSave.dragon.level = newSave.dragon.level\n\t\tif (\n\t\t\thasOwnProperty(newSave.dragon, \"auras\") &&\n\t\t\tnewSave.dragon.auras instanceof Array\n\t\t) {\n\t\t\tfor (const i in newSave.dragon.auras) {\n\t\t\t\tconst aura = newSave.dragon.auras[i]\n\t\t\t\tif (typeof aura === \"number\" || aura === \"sync\")\n\t\t\t\t\tvirtualSave.dragon.auras[i] = aura\n\t\t\t}\n\t\t}\n\t}\n\treturn virtualSave\n}\n\nexport function importSave(data: string): void {\n\tlet newSave: unknown\n\ttry {\n\t\tnewSave = JSON.parse(data)\n\t} catch {\n\t\tif (data !== \"\")\n\t\t\tconsole.warn(\"CPPKIES: Found invalid save, creating new one...\")\n\t\tinitSave()\n\t}\n\tsave = master.save = applySave(newSave)\n\tloadAll()\n}\n\nexport function exportSave(): string {\n\tsaveAll()\n\treturn JSON.stringify(save)\n}\n", "import master from \"./vars\"\nimport { injectCode } from \"./helpers\"\nimport { Injection } from \"./injects/generic\"\nimport { loadBuilding } from \"./saves\"\nimport { resolveAlias } from \"./spritesheets\"\nimport { ReturnableEventEmitter } from \"./lib/eventemitter\"\n\nexport const buildingHooks: Record<string, BuildingHooks> = {}\nexport const customBuildings: Building[] = []\n/**\n * Creates the hooks for a building\n * @param building The building to create hooks for\n */\n\nexport type BuildingHooks = ReturnableEventEmitter<{\n\ttooltip: [string, string]\n\tcps: [number, number]\n\tbuy: [void, void]\n\tlevelUp: [void, void]\n}>\n\nexport function createHooks(building: Building | Game.Object): void {\n\tconst emitter: BuildingHooks = new ReturnableEventEmitter()\n\tconst injections = [\n\t\tnew Injection(\"tooltip\", () => {\n\t\t\tbuilding.tooltip = injectCode(\n\t\t\t\tinjectCode(building.tooltip, \"return\", \"let tempRet = \", \"replace\"),\n\t\t\t\tnull,\n\t\t\t\t`\\n//Cppkies injection\n\t\t\t\treturn Cppkies.buildingHooks[this.name].emit(\"tooltip\", tempRet)`,\n\t\t\t\t\"after\"\n\t\t\t)\n\t\t}),\n\t\tnew Injection(\"buy\", () => {\n\t\t\tbuilding.buy = injectCode(\n\t\t\t\tbuilding.buy,\n\t\t\t\tnull,\n\t\t\t\t`\\n//Cppkies injection\n\t\t\t\tif(success) {\n\t\t\t\t\tCppkies.buildingHooks[this.name].emit(\"buy\")\n\t\t\t\t}`,\n\t\t\t\t\"after\"\n\t\t\t)\n\t\t}),\n\t\tnew Injection(\"levelUp\", () => {\n\t\t\tbuilding.levelUp = injectCode(\n\t\t\t\tbuilding.levelUp,\n\t\t\t\t\"me.level+=1;\",\n\t\t\t\t`\\n// Cppkies injection\nCppkies.buildingHooks[me.name].emit(\"levelUp\")`,\n\t\t\t\t\"after\",\n\t\t\t\t{ me: building }\n\t\t\t)\n\t\t}),\n\t]\n\tinjections.forEach(inject => {\n\t\tinject.func?.()\n\t})\n\tmaster.hooks.on(\"buildingCps\", val => ({\n\t\tbuilding: val.building,\n\t\tcps:\n\t\t\tGame.Objects[val.building] === building\n\t\t\t\t? emitter.emit(\"cps\", val.cps)\n\t\t\t\t: val.cps,\n\t}))\n\tbuildingHooks[building.name] = emitter\n}\n\n/**\n * Automatically finds buildings without hooks and creates them\n */\nexport function hookAllBuildings(): void {\n\tfor (const building of Game.ObjectsById)\n\t\tif (!buildingHooks[building.name]) createHooks(building)\n}\n\n/**\n * The building class for creating new buildings\n */\nexport class Building extends Game.Object {\n\ticonLink: string\n\tbuildingLink: string\n\t/**\n\t * Creates a new building and creates the hooks for it\n\t * @param name The name of the building\n\t * @param commonName Various additional string for the building, split by |:  The name of the building, then in plural, how the building produced the cookies, the effect from sugar lumps, then in plural\n\t * @param desc The description of the building\n\t * @param icon The icon for the building (Only the column matters) (See http://cppkies.js.org/#/./CommonProblems?id=relink-column for instructions about the icons)\n\t * @param bigIcon The icon that shows up in store (Only the row matters) (See http://cppkies.js.org/#/./CommonProblems?id=big-icons for instructions about the big icons)\n\t * @param art The art for the building\n\t * @param cpsFunc The function to calculate CPS\n\t * @param buyFunction The function which gets called when it's bought\n\t * @param foolObject The fool building to display during business day\n\t * @param buildingSpecial The building special and building debuff\n\t */\n\tconstructor(\n\t\tname: string,\n\t\tcommonName: string,\n\t\tdesc: string,\n\t\ticon: Game.Icon,\n\t\tbigIcon: Game.Icon,\n\t\tart: Game.Art,\n\t\tcpsFunc: (me: Building) => number,\n\t\tbuyFunction: () => void,\n\t\tfoolObject: Game.FoolBuilding,\n\t\tbuildingSpecial: [string, string]\n\t) {\n\t\tif (Game.Objects[name])\n\t\t\tthrow new Error(\n\t\t\t\t`Can't create building, \"${name}\" is already used as a building name`\n\t\t\t)\n\t\t//Warn about enforced orders\n\t\tif (icon[1] !== 0) {\n\t\t\tconsole.warn(\n\t\t\t\t\"All icon sheets must follow an order, see https://cppkies.js.org/#/CommonProblems#IconOrder?id=relink-column\"\n\t\t\t)\n\t\t}\n\t\tif (bigIcon[0] !== 0) {\n\t\t\tconsole.warn(\n\t\t\t\t\"All big icon sheets must follow an order, see https://cppkies.js.org/#/CommonProblems#IconOrder?id=big-icons\"\n\t\t\t)\n\t\t}\n\t\tsuper(\n\t\t\tname,\n\t\t\tcommonName,\n\t\t\tdesc,\n\t\t\tbigIcon[1],\n\t\t\ticon[0],\n\t\t\tart,\n\t\t\t0, // The game automatically calculates Price and BaseCps\n\t\t\tcpsFunc,\n\t\t\tbuyFunction\n\t\t)\n\t\tcustomBuildings.push(this)\n\t\t// Create hooks if they don't exist yet\n\t\tif (!buildingHooks[name]) createHooks(this)\n\t\t//Manually relink canvases and contexts because Orteil made it so new buildings break the old canvas and context links\n\t\tfor (const i in Game.ObjectsById) {\n\t\t\tif (parseInt(i) <= 0) continue\n\t\t\tconst me = Game.ObjectsById[i]\n\t\t\tme.canvas = l(`rowCanvas${i}`) as HTMLCanvasElement\n\t\t\tif (!me.canvas) continue\n\t\t\t// Why does getContext return null possibly???\n\t\t\tme.ctx = me.canvas.getContext(\"2d\") as CanvasRenderingContext2D\n\t\t\t//Relink their events too\n\t\t\tme.canvas.addEventListener(\"mouseover\", () => {\n\t\t\t\tme.mouseOn = true\n\t\t\t})\n\t\t\tme.canvas.addEventListener(\"mouseout\", () => {\n\t\t\t\tme.mouseOn = false\n\t\t\t})\n\t\t\tme.canvas.addEventListener(\"mousemove\", e => {\n\t\t\t\tconst box = me.canvas.getBoundingClientRect()\n\t\t\t\tme.mousePos[0] = e.pageX - box.left\n\t\t\t\tme.mousePos[1] = e.pageY - box.top\n\t\t\t})\n\t\t\t//Restore minigames\n\t\t\tif (me.minigame && me.minigameLoaded) {\n\t\t\t\tconst save = me.minigame.save()\n\t\t\t\tme.minigame.launch()\n\t\t\t\tme.minigame.load(save)\n\t\t\t}\n\t\t}\n\t\tthis.buildingLink = bigIcon[2] ?? master.buildingLink\n\t\tthis.iconLink = resolveAlias(icon[2] ?? master.iconLink)\n\t\t// This is the name, description, and icon used during Business Season\n\t\tif (foolObject) Game.foolObjects[name] = foolObject\n\t\t// The name of this building's golden cookie buff and debuff\n\t\tif (buildingSpecial) Game.goldenCookieBuildingBuffs[name] = buildingSpecial\n\n\t\tif (this.iconLink) {\n\t\t\tbuildingHooks[this.name].on(\"tooltip\", ret =>\n\t\t\t\tthis.locked\n\t\t\t\t\t? ret\n\t\t\t\t\t: ret.replace(\n\t\t\t\t\t\t\t\"background-position\",\n\t\t\t\t\t\t\t`background-image:url(${this.iconLink});background-position`\n\t\t\t\t\t  )\n\t\t\t)\n\t\t}\n\n\t\tGame.BuildStore()\n\t\tif (this.buildingLink) {\n\t\t\tmaster.hooks.on(\"buildStore\", () => {\n\t\t\t\tl(\n\t\t\t\t\t`productIcon${this.id}`\n\t\t\t\t).style.backgroundImage = `url(${this.buildingLink})`\n\t\t\t\tl(\n\t\t\t\t\t`productIconOff${this.id}`\n\t\t\t\t).style.backgroundImage = `url(${this.buildingLink})`\n\t\t\t})\n\t\t}\n\t\tGame.BuildStore()\n\t\tthis.canvas = l(`rowCanvas${this.id}`) as HTMLCanvasElement\n\t\t// Why does getContext return null possibly???\n\t\tthis.ctx = this.canvas.getContext(\"2d\") as CanvasRenderingContext2D\n\t\t//this.context = this.ctx\n\t\tthis.pics = []\n\t\tconst muteDiv = document.createElement(\"div\")\n\t\tmuteDiv.className = \"tinyProductIcon\"\n\t\tmuteDiv.id = `mutedProduct${this.id}`\n\t\tmuteDiv.style.display = \"none\"\n\t\tif (this.buildingLink)\n\t\t\tmuteDiv.style.backgroundImage = `url(${this.buildingLink})`\n\t\tmuteDiv.style.backgroundPositionX = `-${icon[0]}px`\n\t\tmuteDiv.style.backgroundPositionY = `-${icon[1]}px`\n\t\tmuteDiv.addEventListener(\"click\", () => {\n\t\t\tthis.mute(0)\n\t\t\twindow.PlaySound(this.muted ? \"snd/clickOff.mp3\" : \"snd/clickOn.mp3\")\n\t\t})\n\n\t\twindow.AddEvent(this.canvas, \"mouseover\", () => {\n\t\t\tthis.mouseOn = true\n\t\t})\n\t\twindow.AddEvent(this.canvas, \"mouseout\", () => {\n\t\t\tthis.mouseOn = false\n\t\t})\n\t\tthis.canvas.addEventListener(\"mousemove\", e => {\n\t\t\tconst box = this.canvas.getBoundingClientRect()\n\t\t\tthis.mousePos[0] = e.pageX - box.left\n\t\t\tthis.mousePos[1] = e.pageY - box.top\n\t\t})\n\t\tl(\"buildingsMute\").appendChild(muteDiv)\n\t\t// Load the save stuff\n\t\tconst loadProps = loadBuilding(this)\n\t\tfor (const i in loadProps) this[i] = loadProps[i]\n\t\tGame.recalculateGains = 1\n\t}\n}\n/**\n * The recommended function to pass in building CpsFunc\n * @param me Itself\n */\nexport const defaultCps = (me: Building): number =>\n\tGame.GetTieredCpsMult(me) * Game.magicCpS(me.name) * me.baseCps\n/**\n * The reccomended function to pass in building BuyFunc\n */\nexport const defaultOnBuy = function(): void {\n\tGame.UnlockTiered(this)\n\tif (\n\t\tthis.amount >= Game.SpecialGrandmaUnlock &&\n\t\tGame.Objects[\"Grandma\"].amount > 0 &&\n\t\tthis.grandma\n\t)\n\t\tGame.Unlock(this.grandma.name)\n}\n", "import { DragonAura, DragonLevel } from \"../dragon\"\nimport { hasOwnProperty } from \"../helpers\"\nimport { save, VANILLA_DRAGON_LEVEL_AMOUNT } from \"../saves\"\nimport master from \"../vars\"\n\nexport default function postInject(): void {\n\tmaster.on(\"getIcon\", ({ icon, type, tier }) => {\n\t\tmaster.customTiers.forEach(val => {\n\t\t\tif (val.keyName === tier.toString() && val.iconLink)\n\t\t\t\ticon[2] = val.iconLink\n\t\t})\n\t\treturn { icon, type, tier }\n\t})\n\tmaster.on(\"getIcon\", ({ icon, type, tier }) => {\n\t\tmaster.customBuildings.forEach(val => {\n\t\t\tif (val.name === type && val.iconLink) icon[2] = val.iconLink\n\t\t})\n\t\treturn { icon, tier, type }\n\t})\n\tmaster.on(\"getIcon\", ({ icon, type, tier }) => {\n\t\tif (\n\t\t\t(icon[2] === undefined || icon[2] === null) &&\n\t\t\t!hasOwnProperty(Game.Tiers[tier.toString()], \"iconLink\")\n\t\t)\n\t\t\ticon[2] = \"\"\n\t\treturn { icon, tier, type }\n\t})\n\t/**\n\t * **Auras**\n\t * Three levels of being loaded:\n\t * 1. Not loaded\n\t * The user can't manipulate Cppkies dragon data, has no aura if aura is custom\n\t * 2. Cppkies loaded (here)\n\t * When loaded with custom aura:\n\t * a. If normal aura is none (has not been modified), keep it at that, but  keep  the custom aura data on save\n\t * b. If normal aura is not none (has been modified), keep it at that, but remove the custom aura data on save\n\t * 3. Aura loaded\n\t * On aura creation, if aura id exists now, set the normal aura to the custom aura\n\t */\n\tmaster.on(\"preSave\", () => {\n\t\tif (Game.dragonAura !== 0) save.dragon.auras[0] = \"sync\"\n\t\tif (Game.dragonAura2 !== 0) save.dragon.auras[1] = \"sync\"\n\n\t\tif (Game.dragonAuras[Game.dragonAura] instanceof DragonAura) {\n\t\t\tsave.dragon.auras[0] = Game.dragonAura\n\t\t\tGame.dragonAura = 0\n\t\t}\n\t\tif (Game.dragonAuras[Game.dragonAura2] instanceof DragonAura) {\n\t\t\tsave.dragon.auras[1] = Game.dragonAura2\n\t\t\tGame.dragonAura2 = 0\n\t\t}\n\t\tif (\n\t\t\tGame.dragonLevels[Game.dragonLevel] instanceof DragonLevel ||\n\t\t\tGame.dragonLevel >= VANILLA_DRAGON_LEVEL_AMOUNT\n\t\t) {\n\t\t\tsave.dragon.level = Game.dragonLevel\n\t\t\twhile (\n\t\t\t\tGame.dragonLevels[Game.dragonLevel] instanceof DragonLevel ||\n\t\t\t\tGame.dragonLevel >= VANILLA_DRAGON_LEVEL_AMOUNT\n\t\t\t)\n\t\t\t\tGame.dragonLevel--\n\t\t} // else save.dragon.level = \"sync\"\n\t})\n\tmaster.on(\"postSave\", () => {\n\t\tif (\n\t\t\tsave.dragon.auras[0] !== \"sync\" &&\n\t\t\tGame.dragonAuras[save.dragon.auras[0]]\n\t\t)\n\t\t\tGame.dragonAura = save.dragon.auras[0]\n\t\tif (\n\t\t\tsave.dragon.auras[1] !== \"sync\" &&\n\t\t\tGame.dragonAuras[save.dragon.auras[1]]\n\t\t)\n\t\t\tGame.dragonAura2 = save.dragon.auras[1]\n\t\tif (save.dragon.level !== \"sync\" && Game.dragonLevels[save.dragon.level])\n\t\t\tGame.dragonLevel = save.dragon.level\n\t})\n\n\tmaster.on(\"reset\", () => {\n\t\tsave.dragon.auras = [\"sync\", \"sync\"]\n\t\tsave.dragon.level = \"sync\"\n\t})\n\n\tmaster.on(\"specialPic\", pic => {\n\t\tconst level = Game.dragonLevels[Game.dragonLevel]\n\t\tif (pic.tab === \"dragon\" && level instanceof DragonLevel)\n\t\t\tpic.pic = level.picLink ?? pic.pic\n\n\t\treturn pic\n\t})\n}\n", "import { main } from \"./injects/basegame\"\n\nimport master from \"./vars\"\nimport { exportSave, importSave } from \"./saves\"\nimport { prod } from \"../isprod.json\"\nimport postInject from \"./injects/postInject\"\nimport { hookAllBuildings } from \"./buildings\"\nimport { InjectParams } from \"./helpers\"\n\nlet CppkiesExport: typeof master\n\ndeclare global {\n\tinterface Window {\n\t\tCppkies: typeof master | undefined\n\t\tCPPKIES_ONLOAD: (() => void)[] | undefined\n\t}\n}\n\n//Check if Cppkies is already created\nif (window.Cppkies) {\n\t//If so, just reexport it\n\tCppkiesExport = window.Cppkies\n} else {\n\tCppkiesExport = master\n\t//Force manual addition since in-module injects b r e a k\n\twindow.Cppkies = CppkiesExport\n\t//Inject maingame and create hooks\n\tmain().then(answer => {\n\t\tCppkiesExport.hooks = answer\n\t\tCppkiesExport.on = answer.on.bind(answer)\n\t\tGame.Notify(\"Cppkies loaded!\", \"\", [32, prod ? 17 : 21], 1.5)\n\n\t\tconst cppkiesNote = document.createElement(\"div\")\n\t\tcppkiesNote.textContent = \"Cppkies!\"\n\t\t;(document.querySelector(\"#topBar\") as HTMLElement).insertBefore(\n\t\t\tcppkiesNote,\n\t\t\t(document.querySelector(\"#topBar\") as HTMLElement).children[1]\n\t\t)\n\n\t\tif (!Game.modSaveData[\"cppkies\"]) Game.modSaveData[\"cppkies\"] = \"{}\"\n\t\tGame.registerMod(\"cppkies\", {\n\t\t\tsave: exportSave,\n\t\t\tload: importSave,\n\t\t})\n\t\tGame.Win(\"Third-party\")\n\t\thookAllBuildings()\n\t\t//Run all onLoad events\n\t\tmaster.onLoad.forEach(val => val())\n\t\t//Force all new onLoad events to run\n\t\tmaster.onLoad = new Proxy(master.onLoad, {\n\t\t\tset: (_target, key, value): boolean => {\n\t\t\t\tif (key !== \"length\") value()\n\t\t\t\treturn true\n\t\t\t},\n\t\t})\n\t\t//Do the same for CPPKIES_ONLOAD\n\t\tif (!window.CPPKIES_ONLOAD) window.CPPKIES_ONLOAD = []\n\t\t//Run all onLoad events\n\t\twindow.CPPKIES_ONLOAD.forEach(val => val())\n\t\t//Force all new onLoad events to run\n\t\twindow.CPPKIES_ONLOAD = new Proxy(master.onLoad, {\n\t\t\tset: (_target, key, value): boolean => {\n\t\t\t\tif (key !== \"length\") value()\n\t\t\t\treturn true\n\t\t\t},\n\t\t})\n\t\tpostInject()\n\t})\n}\nexport default CppkiesExport\nexport { InjectParams } from \"./helpers\"\n", "type EventListenerFunction<\n\tT extends Record<string, [unknown, unknown]>,\n\tN extends keyof T\n> = (src: T[N][0]) => T[N][1]\n\ntype EventList<T extends Record<string, [unknown, unknown]>> = {\n\t[P in keyof T]: EventListenerFunction<T, P>[]\n}\n\n/**\n * A small implementation of node's EventEmitter with return value support\n */\n\nexport class ReturnableEventEmitter<\n\tT extends Record<string, [unknown, unknown]>\n> {\n\t_events = {} as EventList<T>\n\n\t/**\n\t * Registers an event listener which is called each time the event is emitted\n\t * @param name Name of the hook\n\t * @param func The event listener function\n\t */\n\ton<N extends keyof T>(name: N, func: EventListenerFunction<T, N>): void {\n\t\tif (!this._events[name]) {\n\t\t\tthis._events[name] = [func]\n\t\t} else this._events[name].push(func)\n\t}\n\t/**\n\t * Registers an event listener which is called for the first time the event is emitted\n\t * @param name Name of the hook\n\t * @param func The event listener function\n\t */\n\tonce<N extends keyof T>(name: N, func: EventListenerFunction<T, N>): void {\n\t\tthis.on(name, arg => {\n\t\t\tthis.off(name, func)\n\t\t\treturn func(arg)\n\t\t})\n\t}\n\t/**\n\t * Removes an event listener which was registered before\n\t * @param name Name of the hook\n\t * @param func The event listener function\n\t */\n\toff<N extends keyof T>(name: N, func: EventListenerFunction<T, N>): void {\n\t\tthis._events[name].splice(this._events[name].indexOf(func), 1)\n\t}\n\n\t// Sorry for the minor type mess, I blame typescript\n\t/**\n\t * Emits the event, triggering all registered event listeners under the event name and modifying the given value\n\t * @param name The name of the event\n\t * @param startingValue The starting value for the listeners\n\t */\n\temit<N extends keyof T>(\n\t\tname: N,\n\t\t...startingValue: T[N][0] extends void ? [undefined?] : [T[N][0]]\n\t): T[N][1] {\n\t\tlet retVal: T[N][0] | T[N][1] = startingValue[0]\n\t\tif (!this._events[name]) this._events[name] = []\n\t\tfor (const func of this._events[name]) retVal = func(retVal)\n\t\treturn retVal\n\t}\n\t/**\n\t * Emits the event, triggering all registered event listeners under the event name and *not* modifying the given value\n\t * @param name The name of the event\n\t * @param startingValue The starting value for the listeners\n\t */\n\tconstEmit<N extends keyof T>(\n\t\tname: N,\n\t\t...startingValue: T[N][0] extends void ? [undefined?] : [T[N][0]]\n\t): void {\n\t\tif (!this._events[name]) this._events[name] = []\n\t\tfor (const func of this._events[name]) func(startingValue[0])\n\t}\n}\n", "export class Injection {\n\tconstructor(public value: string, public func?: () => void) {}\n}\n", "import { resolveAlias } from \"./spritesheets\"\nimport master from \"./vars\"\n\nexport const customTiers: Tier[] = []\n\nexport default class Tier implements Game.Tier {\n\tachievUnlock: number\n\ticonRow: number\n\ticonLink?: string\n\n\t/**\n\t\tIndicates if the tier shouldn't be accounted for tiered upgrades\n\t*/\n\tspecial: boolean\n\treq?: string\n\tupgrades: Game.GenericTieredUpgrade[]\n\n\tunlock: number\n\tprice: number\n\tkeyName: string\n\n\t/**\n\t * Adds a new tier to the game for upgrades and achievements\n\t * @param name The name of the new tier\n\t * @param sampleIcon A sample of an icon using the tier\n\t * @param color The color of the tier\n\t * @param price The base price of tiered upgrades\n\t * @param special Indicates if the tier shouldn't be accounted for tiered upgrades\n\t * @param unlock How many buildings are needed for the upgrade\n\t * @param achievUnlock How many buildings are needed for the achievement\n\t * @param req Which upgrade is required to unlock the upgrades\n\t * @param keyName Optional, the key for tiers, used in everything\n\t */\n\tconstructor(\n\t\tpublic name: string,\n\t\tsampleIcon: Game.Icon,\n\t\tpublic color: string,\n\t\tspecial = false,\n\t\tprice: number | \"auto\" = \"auto\",\n\t\tunlock: number | \"auto\" | null = null,\n\t\tachievUnlock: number | \"auto\" | null = null,\n\t\treq: string | null = null,\n\t\tkeyName: string | \"auto\" = \"auto\"\n\t) {\n\t\tthis.special = special\n\n\t\tif (keyName === \"auto\")\n\t\t\tif (!special)\n\t\t\t\tthis.keyName = (\n\t\t\t\t\tObject.keys(Game.Tiers).filter(val => !isNaN(parseInt(val))).length +\n\t\t\t\t\t1\n\t\t\t\t).toString()\n\t\t\telse this.keyName = name\n\t\telse this.keyName = keyName\n\n\t\tif (unlock === null) this.unlock = -1\n\t\tif (typeof unlock === \"number\") this.unlock = unlock\n\t\tif ((special === false && unlock === null) || unlock === \"auto\")\n\t\t\tthis.unlock = Game.Tiers[parseInt(this.keyName) - 1].unlock + 50\n\n\t\tif (typeof achievUnlock === \"number\") this.achievUnlock = achievUnlock\n\t\tif ((special === false && achievUnlock === null) || achievUnlock === \"auto\")\n\t\t\tthis.achievUnlock =\n\t\t\t\tGame.Tiers[parseInt(this.keyName) - 1].achievUnlock + 50\n\t\tif (req) this.req = req\n\t\tif (price === \"auto\")\n\t\t\tthis.price =\n\t\t\t\tGame.Tiers[\n\t\t\t\t\tObject.keys(Game.Tiers)\n\t\t\t\t\t\t.filter(val => !isNaN(parseInt(val)))\n\t\t\t\t\t\t.length.toString()\n\t\t\t\t].price * 1e8\n\t\telse this.price = price\n\t\t/*\n\t\t\tAnalyze sample icon\n\t\t*/\n\t\tthis.iconRow = sampleIcon[1]\n\t\tthis.iconLink = resolveAlias(sampleIcon[2] ?? master.iconLink)\n\t\tGame.Tiers[this.keyName] = this\n\t\tcustomTiers.push(this)\n\t}\n}\n", "import { Building } from \"./buildings\"\nimport { save } from \"./saves\"\nimport { resolveIcon } from \"./spritesheets\"\n\nexport class DragonAura implements Game.DragonAura {\n\tpic: Game.Icon\n\t/**\n\t * Creates a (non-building) dragon aura\n\t * @param name Name of the dragon aura (in HTML text)\n\t * @param desc Description of it (in HTML text)\n\t * @param icon The icon of it\n\t */\n\tconstructor(name: string, desc: string, icon: Game.Icon)\n\t/**\n\t * Creates a (building) dragon aura\n\t * @param name Name of the dragon aura (in HTML text)\n\t * @param desc Description of it (in HTML text)\n\t * @param building The building (name or object) to link the aura to\n\t */\n\tconstructor(name: string, desc: string, building: string | Game.Object)\n\tconstructor(\n\t\tpublic name: string,\n\t\tpublic desc: string,\n\t\tbuildingOrIcon: string | Game.Object | Game.Icon\n\t) {\n\t\tif (typeof buildingOrIcon === \"string\")\n\t\t\tbuildingOrIcon = Game.Objects[buildingOrIcon]\n\t\tif (buildingOrIcon instanceof Game.Object)\n\t\t\tthis.pic = resolveIcon([\n\t\t\t\tbuildingOrIcon.iconColumn,\n\t\t\t\t25,\n\t\t\t\tbuildingOrIcon instanceof Building\n\t\t\t\t\t? buildingOrIcon.iconLink\n\t\t\t\t\t: undefined,\n\t\t\t])\n\t\telse this.pic = buildingOrIcon\n\t\tGame.dragonAuras[Object.keys(Game.dragonAuras).length] = this\n\t\tif (\n\t\t\tsave.dragon.auras[0] !== \"sync\" &&\n\t\t\tObject.keys(Game.dragonAuras).length >= save.dragon.auras[0]\n\t\t)\n\t\t\tGame.dragonAura = save.dragon.auras[0]\n\t\tif (\n\t\t\tsave.dragon.auras[1] !== \"sync\" &&\n\t\t\tObject.keys(Game.dragonAuras).length >= save.dragon.auras[1]\n\t\t)\n\t\t\tGame.dragonAura2 = save.dragon.auras[1]\n\t}\n}\n\nexport class DragonLevel implements Game.DragonLevel {\n\t/**\n\t * The X position of the dragon icon\n\t */\n\tpic: number\n\t/**\n\t * The Y position of the dragon icon\n\t */\n\tpicY = 0\n\t/**\n\t * The link to the dragon icon\n\t */\n\tpicLink?: string\n\t// Dragon name\n\tname: string\n\t// Description of the cost\n\tcostStr: () => string\n\t// Determines if the level can be upgraded\n\tcost: () => boolean\n\n\t// Description of effects of leveling up\n\taction: string\n\t/**\n\t * Creates a new dragon level\n\t * @param name Name of the dragon at this level, null for last name\n\t * @param desc A string describing the effects of leveling up\n\t * @param costDescription A string (or a function) describing the resources required to be able to buy the level\n\t * @param canBuy A function which determines if it is possible to buy the level\n\t * @param buy A function which spends the required resources\n\t * @param icon  Icon of the dragon at this level, null for last icon, note that the icon is 96x96, not 48x48\n\t */\n\tconstructor(\n\t\tname: string | null,\n\t\tdesc: string, // `this.action`\n\t\tcostDescription: string | (() => string), // `this.costStr`\n\t\tcanBuy: () => boolean, // `this.cost`\n\t\tpublic buy: () => void,\n\t\ticon?: Game.Icon | null, // `this.pic`, `this.picLink`, and `this.picY`\n\t\torder: number = Game.dragonLevels.length - 3\n\t) {\n\t\tconst lastLevel = Game.dragonLevels[order - 1]\n\t\tthis.name = name ?? lastLevel.name\n\t\tthis.action = desc\n\t\tthis.costStr =\n\t\t\ttypeof costDescription === \"string\"\n\t\t\t\t? () => costDescription\n\t\t\t\t: costDescription\n\t\tthis.cost = canBuy\n\t\tif (icon) {\n\t\t\tthis.pic = icon[0]\n\t\t\tthis.picY = icon[1]\n\t\t\t// TODO: Implement pic Y in specials\n\t\t\tif (this.picY !== 0)\n\t\t\t\tconsole.warn(\"For now, all dragon levels must not use pic Y, sorry.\")\n\t\t\tthis.picLink = icon[2]\n\t\t} else {\n\t\t\tthis.pic = lastLevel.pic\n\t\t\tif (lastLevel instanceof DragonLevel) {\n\t\t\t\tthis.picY = lastLevel.picY\n\t\t\t\tthis.picLink = lastLevel.picLink\n\t\t\t}\n\t\t}\n\t\tGame.dragonLevels.splice(order, 0, this)\n\t\tif (\n\t\t\tsave.dragon.level !== \"sync\" &&\n\t\t\tGame.dragonLevels.length >= save.dragon.level\n\t\t)\n\t\t\tGame.dragonLevel = save.dragon.level\n\t}\n}\n\nexport class DragonAuraLevel extends DragonLevel {\n\t/**\n\t * Creates a level which unlocks an aura\n\t * @param auraName Name of the aura\n\t * @param auraDesc Short description of the aura, in html text\n\t * @param building The building which the aura is tied to\n\t */\n\tconstructor(\n\t\tauraName: string,\n\t\tauraDesc: string,\n\t\tbuilding: string | Game.Object\n\t) {\n\t\tif (typeof building === \"string\") building = Game.Objects[building]\n\n\t\tsuper(\n\t\t\tnull,\n\t\t\t`Train ${auraName}<br/><small>Aura : ${auraDesc}</small>`,\n\t\t\t`100 ${building.plural}`,\n\t\t\t// Grr typescript\n\t\t\t() => (building as Game.Object).amount >= 100,\n\t\t\t() =>\n\t\t\t\t(building as Game.Object & {\n\t\t\t\t\tsacrifice: (amount: number) => void // I made a typo, sorry\n\t\t\t\t}).sacrifice(100)\n\t\t)\n\t}\n}\n", "import { toRomanNumeral } from \"./helpers\"\nimport { resolveIcon } from \"./spritesheets\"\n\ntype MilkClass = typeof Game.Milk & Game.ChoiceCosmetics\n\nexport class Milk implements MilkClass {\n\ticon: [number, number]\n\ticonLink?: string\n\t/**\n\t * Creates a new milk type\n\t * @param name The name of the milk\n\t * @param icon The icon of the mink\n\t * @param pic The image to use for the milk itself, must end in .png\n\t * @param special If true, the milk is only avaliable via milk selector\n\t */\n\tconstructor(\n\t\tpublic name: string,\n\t\ticon: Game.Icon,\n\t\tpublic pic: string,\n\t\tpublic special = false\n\t) {\n\t\tif (!pic.endsWith(\".png\"))\n\t\t\tthrow new Error(\n\t\t\t\t`Can't create milk with the milk URL \"${pic}\", the URL must end with .png!`\n\t\t\t)\n\t\tif (!special)\n\t\t\tthis.name = `Rank ${toRomanNumeral(Game.Milks.length + 1)} - ${name}`\n\t\tthis.pic = pic.substr(0, pic.length - 4)\n\t\tresolveIcon(icon)\n\t\tthis.icon = [icon[0], icon[1]]\n\t\tthis.iconLink = icon[2]\n\t\t// TODO: Special milks\n\t\tif (special)\n\t\t\tGame.MilksByChoice[Object.keys(Game.MilksByChoice).length] = this\n\t\telse Game.Milks.push(this)\n\t}\n}\n", "import { save } from \"./saves\"\nimport {\n\tBuilding,\n\tdefaultOnBuy,\n\tdefaultCps,\n\tcustomBuildings,\n\tbuildingHooks,\n} from \"./buildings\"\nimport {\n\tUpgrade,\n\tTieredUpgrade,\n\tHeavenlyUpgrade,\n\tGrandmaSynergy,\n\tSynergyUpgrade,\n\tcustomUpgrades,\n\tKittenUpgrade,\n} from \"./upgrade\"\nimport Tier, { customTiers } from \"./tiers\"\nimport { injectCode, injectCodes } from \"./helpers\"\nimport {\n\tpatchIconsheet,\n\trelinkColumn,\n\trelinkRow,\n\textraColumnIcons,\n\textraRowIcons,\n\talias,\n\taliases,\n} from \"./spritesheets\"\nimport { Hooks } from \"./injects/basegame\"\nimport { hookAllBuildings } from \"./buildings\"\nimport { CursorUpgrade, MouseUpgrade, CookieUpgrade } from \"./upgrade\"\nimport { MouseAchievement } from \"./achievement\"\nimport { DragonAura, DragonLevel, DragonAuraLevel } from \"./dragon\"\nimport { Milk } from \"./milk\"\nimport {\n\tTieredAchievement,\n\tProductionAchievement,\n\tLevel10Achievement,\n} from \"./achievement\"\n\nimport {\n\tAchievement,\n\tCpsAchievement,\n\tBankAchievement,\n\tcustomAchievements,\n} from \"./achievement\"\n\n/**\n * The main object which is exported by Cppkies\n */\nconst master = {\n\thooks: (null as unknown) as Hooks,\n\ton: (null as unknown) as Hooks[\"on\"],\n\t/**\n\t * The multiplier of milk which is not accessible in game by default\n\t */\n\thiddenMilkMult: 1,\n\ticonLink: \"\",\n\tbuildingLink: \"\",\n\tcookieOrder: 10020,\n\tbuildingHooks,\n\tbuildingHooksById: [],\n\thookAllBuildings,\n\tcustomBuildings,\n\tcustomUpgrades,\n\tcustomTiers,\n\tsave,\n\tonLoad: [] as (() => void)[],\n\tBuilding,\n\tUpgrade,\n\tTieredUpgrade,\n\tTier,\n\tHeavenlyUpgrade,\n\tGrandmaSynergy,\n\tSynergyUpgrade,\n\tCursorUpgrade,\n\tKittenUpgrade,\n\tMouseUpgrade,\n\tCookieUpgrade,\n\tAchievement,\n\tCpsAchievement,\n\tBankAchievement,\n\tTieredAchievement,\n\tProductionAchievement,\n\tLevel10Achievement,\n\tMouseAchievement,\n\tcustomAchievements,\n\tDragonAura,\n\tDragonLevel,\n\tDragonAuraLevel,\n\tMilk,\n\tinjectCode,\n\tinjectCodes,\n\tDEFAULT_ONBUY: defaultOnBuy,\n\tDEFAULT_CPS: defaultCps,\n\ticons: {\n\t\trelinkColumn,\n\t\trelinkRow,\n\t\tpatchIconsheet,\n\t\textraColumnIcons,\n\t\textraRowIcons,\n\t\talias,\n\t\taliases,\n\t},\n}\n\nexport default master\n", "import { injectCode, injectCodes } from \"../helpers\"\nimport { ReturnableEventEmitter } from \"../lib/eventemitter\"\nimport { Injection } from \"./generic\"\n\nexport type Hooks = ReturnableEventEmitter<{\n\t//! Custom menus\n\t/**\n\t * Allows you to add entries to all menus\n\t */\n\tmenu: [void, void]\n\t/**\n\t * Allows you to add entries to the options menu\n\t */\n\toptionsMenu: [void, void]\n\t/**\n\t * Allows you to add entries to the stats menu\n\t */\n\tstatsMenu: [void, void]\n\t/**\n\t * Allows you to add entries to the info menu\n\t */\n\tinfoMenu: [void, void]\n\n\t//! Data manipulation\n\n\t/**\n\t * Allows you to execute a function on before saving, useful for cleaning up data which will be invalid if no mod is present\n\t */\n\tpreSave: [void, void]\n\n\tpostSave: [void, void]\n\t/**\n\t * Allows you to execute a function on data load, useful for custom data resetting\n\t * @param hard whether or not this is a hard reset\n\t */\n\treset: [boolean, void]\n\n\treincarnate: [void, void]\n\t//! Tiers\n\n\tgetIcon: [\n\t\t{\n\t\t\ttype: string\n\t\t\ttier: string | number\n\t\t\ticon: Game.Icon\n\t\t},\n\t\t{\n\t\t\ttype: string\n\t\t\ttier: string | number\n\t\t\ticon: Game.Icon\n\t\t}\n\t]\n\n\t//! Buildings\n\t/**\n\t * Called after BuildStore, used internally\n\t */\n\tbuildStore: [void, void]\n\t/**\n\t * Adds grandma options for the grandma art\n\t */\n\tgrandmaPic: [string[], string[]]\n\t//! Gameplay\n\trawCps: [number, number]\n\trawCpsMult: [number, number]\n\tcps: [number, number]\n\tcpsMult: [number, number]\n\t/**\n\t * The multiplier of cursor finger bonus\n\t */\n\tcursorFingerMult: [number, number]\n\t/**\n\t * Cookies per click\n\t */\n\tcpc: [number, number]\n\tcpcAdd: [number, number]\n\t//! Vanilla hooks\n\tlogic: [void, void]\n\tdraw: [void, void]\n\tcheck: [void, void]\n\tticker: [string[], string[]]\n\t// !!!INTERNAL DO NOT USE!!! Use buildingHooks' \"cps\" instead\n\tbuildingCps: [\n\t\t{ building: string; cps: number },\n\t\t{ building: string; cps: number }\n\t]\n\t//! Special objects hooks\n\tspecialPic: [\n\t\t{ tab: string; pic: string; frame: number },\n\t\t{ tab: string; pic: string; frame: number }\n\t]\n}>\n/**\n * Creates the function hooks for base game\n * @returns A promise\n */\nexport function main(): Promise<Hooks> {\n\treturn new Promise(resolve => {\n\t\tconst emitter: Hooks = new ReturnableEventEmitter()\n\t\tconst injections: Array<Injection> = [\n\t\t\t//// -- Custom menus -- ////\n\t\t\t/*\n\t\t\tHooks that allow you to add new stuff do the menu \n\n\t\t\t\"optionsMenu\"\n\t\t\tAllows you to add entries to the options menu\n\n\t\t\t\"statsMenu\"\n\t\t\tAllows you to add entries to the stats menu\n\n\t\t\t\"logMenu\"\n\t\t\tAllows you to add entries to the info menu\n\n\t\t\t\"menu\"\n\t\t\tAllows you to add entries to all menus\n\t\t\t*/\n\t\t\tnew Injection(\"customMenu\", () => {\n\t\t\t\tGame.UpdateMenu = injectCode(\n\t\t\t\t\tGame.UpdateMenu,\n\t\t\t\t\tnull,\n\t\t\t\t\t`\n\t\t\t\t\t// Cppkies injection\n\t\t\t\t\tswitch (Game.onMenu) {\n\t\t\t\t\t\tcase \"prefs\":\n\t\t\t\t\t\t\tCppkies.hooks.emit(\"optionsMenu\")\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tcase \"stats\":\n\t\t\t\t\t\t\tCppkies.hooks.emit(\"statsMenu\")\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tcase \"log\":\n\t\t\t\t\t\t\tCppkies.hooks.emit(\"logMenu\")\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tCppkies.hooks.emit(\"menu\")\n\t\t\t\t\t`,\n\t\t\t\t\t\"after\"\n\t\t\t\t)\n\t\t\t}),\n\t\t\t//// -- Data manipulation -- ////\n\n\t\t\tnew Injection(\"preSave\", () => {\n\t\t\t\tGame.WriteSave = injectCode(\n\t\t\t\t\tGame.WriteSave,\n\t\t\t\t\tnull,\n\t\t\t\t\t`\n\t\t\t\t\t// Cppkies injection\n\t\t\t\t\tCppkies.hooks.emit(\"preSave\")\n\t\t\t\t\t`,\n\t\t\t\t\t\"before\"\n\t\t\t\t)\n\t\t\t}),\n\t\t\tnew Injection(\"postSave\", () => {\n\t\t\t\tGame.WriteSave = injectCode(\n\t\t\t\t\tGame.WriteSave,\n\t\t\t\t\t\"if (type==2 || type==3)\",\n\t\t\t\t\t`\n\t\t\t\t\t// Cppkies injection\n\t\t\t\t\tCppkies.hooks.emit(\"postSave\")\n\t\t\t\t\t`,\n\t\t\t\t\t\"before\"\n\t\t\t\t)\n\t\t\t}),\n\t\t\tnew Injection(\"reset\", () => {\n\t\t\t\t// Called before everything else, so ascend with _ achievements are possible\n\t\t\t\tGame.Reset = injectCode(\n\t\t\t\t\tGame.Reset,\n\t\t\t\t\tnull,\n\t\t\t\t\t`\n\t\t\t\t\t// Cppkies injection\n\t\t\t\t\tCppkies.hooks.constEmit(\"reset\", hard)\n\t\t\t\t\t`,\n\t\t\t\t\t\"before\"\n\t\t\t\t)\n\t\t\t}),\n\t\t\tnew Injection(\"reincarnate\", () => {\n\t\t\t\tGame.registerHook(\"reincarnate\", () => emitter.emit(\"reincarnate\"))\n\t\t\t}),\n\t\t\t//// -- Tiers -- ////\n\t\t\t/**\n\t\t\t\t\"customGetIcon\"\n\t\t\t\tOverrides for icons gotten from GetIcon\n\t\t\t\ttype: string - The type of icon, either a building name or \"Kitten\"\n\t\t\t\ttier: string - The tier of the icon, gotten from Tier.iconRow\n\t\t\t\ticon: Icon - the current icon\n\t\t\t */\n\t\t\tnew Injection(\"getIcon\", () => {\n\t\t\t\tGame.GetIcon = injectCodes(Game.GetIcon, [\n\t\t\t\t\t[\n\t\t\t\t\t\t\"return [col,Game.Tiers[tier].iconRow];\",\n\t\t\t\t\t\t`// Cppkies Injection\n\t\t\t\t\treturn Cppkies.hooks.emit(\"getIcon\", { icon: [col, Game.Tiers[tier].iconRow], tier: tier, type: type }).icon`,\n\t\t\t\t\t\t\"replace\",\n\t\t\t\t\t],\n\t\t\t\t\t[\"col=18;\", 'else if (type === \"Mouse\") col = 11;', \"after\"],\n\t\t\t\t])\n\t\t\t}),\n\t\t\t//// -- Sugar Lump -- ////\n\t\t\t// TODO Rewrite Game.computeLumpType\n\t\t\t// TODO Cppkies.hooks.customComputeLumpType\n\t\t\t// TODO Cppkies.hooks.customDoLumps\n\t\t\t//// -- Shimmers -- ////\n\t\t\t// TODO everything shimmer related\n\t\t\t//// -- Prompts -- ////\n\t\t\t// Idk what here\n\t\t\t//// -- Menus -- ////\n\t\t\t// TODO Patch disabled buttons(?)\n\t\t\t//// -- Buildings -- ////\n\t\t\tnew Injection(\"buildStore\", () => {\n\t\t\t\tGame.BuildStore = injectCode(\n\t\t\t\t\tGame.BuildStore,\n\t\t\t\t\tnull,\n\t\t\t\t\t`;\\nCppkies.hooks.emit(\"buildStore\")`,\n\t\t\t\t\t\"after\"\n\t\t\t\t)\n\t\t\t}),\n\t\t\tnew Injection(\"grandmaPic\", () => {\n\t\t\t\tGame.Objects.Grandma.art.pic = injectCode(\n\t\t\t\t\tGame.Objects.Grandma.art.pic as (\n\t\t\t\t\t\tbuilding: Game.Object,\n\t\t\t\t\t\ti: number\n\t\t\t\t\t) => string,\n\t\t\t\t\t\"return choose(list)+'.png'\",\n\t\t\t\t\t`// Cppkies injection\n\t\t\t\t\tlist = Cppkies.hooks.emit(\"grandmaPic\", list)\n\t\t\t\t\t`,\n\t\t\t\t\t\"before\"\n\t\t\t\t)\n\t\t\t}),\n\t\t\t//// -- Gameplay -- ////\n\t\t\tnew Injection(\"cps\", () => {\n\t\t\t\tGame.CalculateGains = injectCodes(Game.CalculateGains, [\n\t\t\t\t\t[\n\t\t\t\t\t\t\"var rawCookiesPs=Game.cookiesPs*mult;\",\n\t\t\t\t\t\t`// Cppkies injection\n\t\t\t\t\tGame.cookiesPs = Cppkies.hooks.emit(\"rawCps\", Game.cookiesPs);\n\t\t\t\t\tmult = Cppkies.hooks.emit(\"rawCpsMult\", mult);\\n`,\n\t\t\t\t\t\t\"before\",\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t\"Game.cookiesPs=Game.runModHookOnValue('cps',Game.cookiesPs);\",\n\t\t\t\t\t\t`// Cppkies injection\n\t\t\t\t\t\tmult = Cppkies.hooks.emit(\"cpsMult\", mult);\\n`,\n\t\t\t\t\t\t\"before\",\n\t\t\t\t\t],\n\t\t\t\t])\n\t\t\t\tGame.registerHook(\"cps\", cps => emitter.emit(\"cps\", cps))\n\t\t\t}),\n\t\t\tnew Injection(\"cursorFingerMult\", () => {\n\t\t\t\tGame.Objects.Cursor.cps = injectCode(\n\t\t\t\t\tGame.Objects.Cursor.cps,\n\t\t\t\t\t`var mult=1;`,\n\t\t\t\t\t`// Cppkies injection\nadd = Cppkies.hooks.emit(\"cursorFingerMult\", add);\\n`,\n\t\t\t\t\t\"before\"\n\t\t\t\t)\n\t\t\t}),\n\t\t\tnew Injection(\"cpc\", () => {\n\t\t\t\tGame.mouseCps = injectCodes(Game.mouseCps, [\n\t\t\t\t\t[\n\t\t\t\t\t\t`var num=0;`,\n\t\t\t\t\t\t`// Cppkies injection\n\t\t\t\t\t\tadd = Cppkies.hooks.emit(\"cursorFingerMult\", add);\\n`,\n\t\t\t\t\t\t\"before\",\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t`var out`,\n\t\t\t\t\t\t`// Cppkies injection\n\t\t\t\t\t\tadd = Cppkies.hooks.emit(\"cpcAdd\", add);\\n`,\n\t\t\t\t\t\t\"before\",\n\t\t\t\t\t],\n\t\t\t\t])\n\n\t\t\t\tGame.registerHook(\"cookiesPerClick\", cpc => emitter.emit(\"cpc\", cpc))\n\t\t\t}),\n\t\t\t// !!!INTERNAL DO NOT USE!!! Use buildingHooks' \"cps\" instead\n\t\t\tnew Injection(\"buildingCps\", () => {\n\t\t\t\tGame.CalculateGains = injectCode(\n\t\t\t\t\tGame.CalculateGains,\n\t\t\t\t\t\"me.storedTotalCps=me.amount*me.storedCps;\",\n\t\t\t\t\t`// Cppkies injection (internal, do not use)\nme.storedCps = Cppkies.hooks.emit(\"buildingCps\", { building: i, cps: me.storedCps }).cps;\\n`,\n\t\t\t\t\t\"before\"\n\t\t\t\t)\n\t\t\t}),\n\t\t\t//// -- Vanilla -- ////\n\t\t\tnew Injection(\"logic\", () => {\n\t\t\t\tGame.registerHook(\"logic\", () => emitter.emit(\"logic\"))\n\t\t\t}),\n\t\t\tnew Injection(\"draw\", () => {\n\t\t\t\tGame.registerHook(\"draw\", () => emitter.emit(\"draw\"))\n\t\t\t}),\n\t\t\tnew Injection(\"check\", () => {\n\t\t\t\tGame.registerHook(\"check\", () => emitter.emit(\"check\"))\n\t\t\t}),\n\t\t\tnew Injection(\"ticker\", () => {\n\t\t\t\tGame.getNewTicker = injectCode(\n\t\t\t\t\tGame.getNewTicker,\n\t\t\t\t\t\"Game.TickerAge=Game.fps*10;\",\n\t\t\t\t\t`// Cppkies injection\nlist = Cppkies.hooks.emit(\"ticker\", list);\\n`,\n\t\t\t\t\t\"before\"\n\t\t\t\t)\n\t\t\t}),\n\t\t\t//// -- Specials -- ////\n\t\t\tnew Injection(\"specialPic\", () => {\n\t\t\t\tGame.DrawSpecial = injectCode(\n\t\t\t\t\tGame.DrawSpecial,\n\t\t\t\t\t\"if (hovered || selected)\",\n\t\t\t\t\t`// Cppkies injection\nconst override = Cppkies.hooks.emit(\"specialPic\", {tab: Game.specialTabs[i], frame: frame, pic: pic})\npic = override.pic\nframe = override.frame;\\n`,\n\t\t\t\t\t\"before\"\n\t\t\t\t)\n\t\t\t\tGame.ToggleSpecialMenu = injectCode(\n\t\t\t\t\tGame.ToggleSpecialMenu,\n\t\t\t\t\t\"else {pic='dragon.png?v='+Game.version;frame=4;}\",\n\t\t\t\t\t`// Cppkies injection\nconst override = Cppkies.hooks.emit(\"specialPic\", {tab: Game.specialTab, frame: frame, pic: pic})\npic = override.pic\nframe = override.frame;\\n`,\n\t\t\t\t\t\"after\"\n\t\t\t\t)\n\t\t\t}),\n\t\t]\n\t\tinjections.forEach(inject => {\n\t\t\tinject.func?.()\n\t\t})\n\t\t//Misc stuff\n\t\tGame.Loader.Load = injectCode(\n\t\t\tGame.Loader.Load,\n\t\t\t\"img.src=this.domain\",\n\t\t\t`\n\t\t\t// Cppkies injection\n\t\t\timg.src = (assets[i].indexOf('http') !== -1 ? \"\" : this.domain)\n`,\n\t\t\t\"replace\"\n\t\t)\n\t\tGame.UpdateMenu = injectCodes(Game.UpdateMenu, [\n\t\t\t[\n\t\t\t\t\"url(img/'+milk.pic+'.png)\",\n\t\t\t\t\"url(' + (milk.pic.indexOf('http') >= 0 ? milk.pic : 'img/'+milk.pic) + '.png)\",\n\t\t\t\t\"replace\",\n\t\t\t],\n\t\t\t[\n\t\t\t\t\"img/icons.png?v='+Game.version+'\",\n\t\t\t\t\"' + (Game.Milks[i].iconLink ? Game.Milks[i].iconLink : 'img/icons.png?v='+Game.version) + '\",\n\t\t\t\t\"replace\",\n\t\t\t],\n\t\t])\n\n\t\tGame.ToggleSpecialMenu = injectCodes(Game.ToggleSpecialMenu, [\n\t\t\t[\n\t\t\t\t\">=5\",\n\t\t\t\t'>=Game.dragonLevels.findIndex(val => val.name === \"Krumblor, cookie hatchling\")',\n\t\t\t\t\"replace\",\n\t\t\t],\n\t\t\t[\n\t\t\t\t\">=25\",\n\t\t\t\t'>=Game.dragonLevels.findIndex(val => val.action === \"Train secondary aura<br><small>Lets you use two dragon auras simultaneously</small>\") + 1',\n\t\t\t\t\"replace\",\n\t\t\t],\n\t\t])\n\t\tGame.Objects.Cursor.buyFunction = injectCode(\n\t\t\tGame.Objects.Cursor.buyFunction,\n\t\t\t\"Game.Unlock('Octillion fingers');\",\n\t\t\t`\n \t\t\t// Cppkies injection\n\t\t\tfor(const i in this.tieredUpgrades) {\n\t\t\t\tif (isNaN(parseInt(i))) continue\n\t\t\t\tif (this.amount >= Game.Tiers[this.tieredUpgrades[i].tier].unlock - 50) this.tieredUpgrades[i].unlock()\n\t\t\t}\n`,\n\t\t\t\"after\"\n\t\t)\n\t\tGame.Object = injectCode(\n\t\t\tGame.Object,\n\t\t\t\"Game.ObjectsN++\",\n\t\t\t`\n// Cppkies injection\nCppkies.hookAllBuildings();\\n`,\n\t\t\t\"after\"\n\t\t)\n\t\tGame.CalculateGains = injectCode(\n\t\t\tGame.CalculateGains,\n\t\t\t\"var catMult=1;\",\n\t\t\t`// Cppkies injection\n\t\t\tCppkies.hiddenMilkMult = milkMult;\\n`,\n\t\t\t\"before\"\n\t\t)\n\t\tresolve(emitter)\n\t})\n}\n", "import Cppkies from \"cppkies\";\r\n\r\nimport { PrestigePage, RiftUpgrade, PagedHeavenlyUpgrade } from \"./rifts\";\r\n\r\nimport { TopBarMenuWidget, BuildingBarMenuWidget } from \"./bars\";\r\n\r\nimport { Task } from \"./quests\";\r\n\r\nimport { TagCondition } from \"./tags\";\r\nimport { AuthorAchievement } from \"./achievement/AuthorAchievement\";\r\nimport { AdvancedAchievement } from \"./achievement\";\r\nimport { AdvancedUpgrade, AdvancedHeavenlyUpgrade } from \"./upgrade\";\r\nimport { createElementFromString, IconToStyle, exclude } from \"./helpers/common\";\r\n\r\nconst SkullyCore = {\r\n\t// Base\r\n\tAdvancedAchievement,\r\n\tAdvancedHeavenlyUpgrade,\r\n\tAdvancedUpgrade,\r\n\tAuthorAchievement,\r\n\tTagCondition,\r\n\r\n\t// Prestige Pages & Rifts\r\n\tPrestigePage,\r\n\tRiftUpgrade,\r\n\tPagedHeavenlyUpgrade,\r\n\r\n\tcurrentPage: \"vanilla\",\r\n\tpages: { vanilla: Game.PrestigeUpgrades } as Record<string, Game.HeavenlyUpgrade[]>,\r\n\r\n\t// Injecting into bars to add stuff (ex. sugar lumps)\r\n\tTopBarMenuWidget,\r\n\tBuildingBarMenuWidget,\r\n\r\n\t// Task Effects (aka. quests), tasks that have a completion req and give a reward when completed\r\n\tTask,\r\n\r\n\t// OnLoad\r\n\tonLoad: [] as (() => void)[],\r\n\r\n\t// Global Helpers\r\n\texclude,\r\n\tIconToStyle,\r\n\tcreateElementFromString,\r\n};\r\n\r\ndeclare global {\r\n\tinterface Window {\r\n\t\tSkullyCore: typeof SkullyCore | undefined;\r\n\t}\r\n}\r\n// eslint-disable-next-line import/no-mutable-exports\r\nlet SkullyCoreExport: typeof SkullyCore;\r\nif (typeof window.SkullyCore !== \"undefined\") SkullyCoreExport = window.SkullyCore;\r\nelse {\r\n\twindow.SkullyCore = SkullyCore;\r\n\tSkullyCoreExport = SkullyCore;\r\n\r\n\tCppkies.onLoad.push(() => {\r\n\t\tconst enum InjectCode {\r\n\t\t\tAfter = \"after\",\r\n\t\t\tReplace = \"replace\",\r\n\t\t\tBefore = \"before\",\r\n\t\t}\r\n\r\n\t\t// Author Upgrade\r\n\t\tGame.UpdateMenu = Cppkies.injectCodes(Game.UpdateMenu, [\r\n\t\t\t[\r\n\t\t\t\t\"for (var i in achievements)\",\r\n\t\t\t\t'pools.authors = \"<b>Authors</b> <small>The people who made the mods you are playing with now!</small>\";',\r\n\t\t\t\tInjectCode.Before,\r\n\t\t\t],\r\n\t\t]);\r\n\r\n\t\tGame.crate = Cppkies.injectCodes(Game.crate, [\r\n\t\t\t[\r\n\t\t\t\t\"if (neuromancy)\",\r\n\t\t\t\t'if (neuromancy && (typeof me.noNeuromancy !== \"undefined\" ? !me.noNeuromancy : true))',\r\n\t\t\t\tInjectCode.Replace,\r\n\t\t\t],\r\n\t\t]);\r\n\r\n\t\tGame.crateTooltip = Cppkies.injectCodes(Game.crateTooltip, [\r\n\t\t\t// Tag Logic\r\n\t\t\t[\r\n\t\t\t\t\"var tagsStr='';\",\r\n\t\t\t\t/* javascript*/ `\r\n\t\t\t\tif (typeof me.noTags !== \"undefined\" ? me.noTags : false) tags = []\r\n\t\t\t\tif (typeof me.tags !== \"undefined\") {\r\n\t\t\t\t\tfor(let i in me.tags) {\r\n\t\t\t\t\t\ttags.concat(me.tags[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (typeof window.SkullyCore !== \"undefined\") window.SkullyCore.TagCondition.Conditions.forEach((element) => {\r\n\t\t\t\t\tif (typeof element.tagFunction === \"function\") {\r\n\t\t\t\t\t\tif (element.tagFunction(me)) tags.push(element.name, element.color) \r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.warn(\"Malformed TagCondition\")\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t`,\r\n\t\t\t\tInjectCode.Before,\r\n\t\t\t],\r\n\t\t]);\r\n\t\t/*\r\n        Note for anyone reading this I don't use the in operator because apparently it is rather slow. While I myself have not done any tests I did this just to be safe.\r\n        Plus while it would be a bit more readable, It wouldn't make much of a difference since it would look something like this:\r\n        if ((native.code === true) && (\"exclude\" in me ? \"total\" in me.exclude ? !me.exclude.total : true : true)) { // True in this case is treated as an \"ignore me\"\r\n            //actual code\r\n        }\r\n        Rather then this :\r\n        if ((native.code === true) && (typeof me.exclude === \"undefined\" ? true : typeof me.exclude.total === \"undefined\"  ? true : !me.exclude.total)) {\r\n            //actual code\r\n        }\r\n        So a bit of a difference but not much, as I said.\r\n\r\n        Another thing I noticed opon writing this is I could've used nested if statements instead of nested ternary operators but... uhh I probabaly should've done that but.... I don't want to redo my code now.\r\n        I might redo it later though.\r\n\r\n        Redone Later B)\r\n            - Bob\r\n        */\r\n\r\n\t\tGame.UpdateMenu = Cppkies.injectCodes(Game.UpdateMenu, [\r\n\t\t\t// Exclude Total\r\n\t\t\t[\r\n\t\t\t\t\"if (me.pool=='' || me.pool=='cookie' || me.pool=='tech') upgradesTotal++;\",\r\n\t\t\t\t`if (me.pool=='' || me.pool=='cookie' || me.pool=='tech') {\r\n\t\t\t\t\t// SkullyCore Inject\r\n\t\t\t\t\tif (window.SkullyCore.exclude(\"total\", me)) upgradesTotal++;\r\n\t\t\t\t}`,\r\n\t\t\t\tInjectCode.Replace,\r\n\t\t\t],\r\n\r\n\t\t\t// Exclude Debug - Display\r\n\t\t\t[\r\n\t\t\t\t\"if (me.pool=='debug') hiddenUpgrades += str2;\",\r\n\t\t\t\t`if (me.pool=='debug') { \r\n\t\t\t\t\t// SkullyCore Inject\r\n\t\t\t\t\tif (window.SkullyCore.exclude(\"debug\", me)) hiddenUpgrades += str2;\r\n\t\t\t\t}`,\r\n\t\t\t\tInjectCode.Replace,\r\n\t\t\t],\r\n\r\n\t\t\t// Exclude Prestige - Display & Count\r\n\t\t\t[\r\n\t\t\t\t\"if (me.pool=='prestige') {prestigeUpgrades+=str2;prestigeUpgradesTotal++;}\",\r\n\t\t\t\t`if (me.pool=='prestige') {\r\n               \t\t// SkullyCore Inject\r\n\t\t\t\t\tif (window.SkullyCore.exclude(\"prestige\", me)) {\r\n\t\t\t\t\t\tprestigeUpgrades += str2;\r\n\t\t\t\t\t\tprestigeUpgradesTotal++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}`,\r\n\t\t\t\tInjectCode.Replace,\r\n\t\t\t],\r\n\t\t\t[\r\n\t\t\t\t\"if (me.pool=='prestige') prestigeUpgradesOwned++;\",\r\n\t\t\t\t`if (me.pool=='prestige') {\r\n\t\t\t\t\t// SkullyCore Inject\r\n\t\t\t\t\tif (window.SkullyCore.exclude(\"prestige\", me)) prestigeUpgradesOwned++;\r\n\t\t\t\t}`,\r\n\t\t\t\tInjectCode.Replace,\r\n\t\t\t],\r\n\r\n\t\t\t// Exclude Cookie - Display\r\n\t\t\t[\r\n\t\t\t\t\"if (me.pool=='cookie') cookieUpgrades+=str2;\",\r\n\t\t\t\t`if (me.pool=='cookie') {\r\n\t\t\t\t\t// SkullyCore Inject\r\n\t\t\t\t\tif (window.SkullyCore.exclude(\"cookie\", me)) cookieUpgrades += str2;\r\n\t\t\t\t}`,\r\n\t\t\t\tInjectCode.Replace,\r\n\t\t\t],\r\n\r\n\t\t\t// Exclude Other - Display\r\n\t\t\t[\r\n\t\t\t\t\"if (me.pool!='toggle' && me.pool!='unused') upgrades+=str2;\",\r\n\t\t\t\t`if (me.pool!='toggle' && me.pool!='unused') {\r\n\t\t\t\t\t// SkullyCore Inject\r\n\t\t\t\t\tif (window.SkullyCore.exclude(\"other\", me)) {\r\n\t\t\t\t\t\tupgrades+=str2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}`,\r\n\t\t\t\tInjectCode.Replace,\r\n\t\t\t],\r\n\r\n\t\t\t// Exclude Shadow - Count\r\n\t\t\t[\r\n\t\t\t\t\"achievementsOwnedOther++;\",\r\n\t\t\t\t`if (window.SkullyCore.exclude(\"shadow\", me)) {\r\n\t\t\t\t\t// SkullyCore Inject\r\n\t\t\t\t\tachievementsOwnedOther++;\r\n\t\t\t\t}`,\r\n\t\t\t\tInjectCode.Replace,\r\n\t\t\t],\r\n\t\t]);\r\n\r\n\t\tGame.BuildAscendTree = Cppkies.injectCodes(Game.BuildAscendTree, [\r\n\t\t\t[\r\n\t\t\t\t\"for (var i in Game.PrestigeUpgrades)\",\r\n\t\t\t\t\"for (var i in window.SkullyCore.pages[window.SkullyCore.currentPage])\",\r\n\t\t\t\tInjectCode.Replace,\r\n\t\t\t],\r\n\t\t\t[\r\n\t\t\t\t\"var str='';\",\r\n\t\t\t\t\"var currentHeavenlyUpgrades = window.SkullyCore.pages[window.SkullyCore.currentPage];\\n\",\r\n\t\t\t\tInjectCode.Before,\r\n\t\t\t],\r\n\t\t\t[\"Game.PrestigeUpgrades\", \"currentHeavenlyUpgrades\", InjectCode.Replace],\r\n\t\t]);\r\n\r\n\t\t/*\r\n\t\tGame.tooltip.draw = Cppkies.injectCodes(Game.tooltip.draw, [\r\n            [\r\n\t\t\t\t`this.shouldHide=0;`,\r\n\t\t\t\t`if (this.stopNewTooltips === true) {`,\r\n\t\t\t\tInjectCode.Before\r\n\t\t\t],\r\n            [\r\n\t\t\t\t`this.on=1;`,\r\n\t\t\t\t`}`,\r\n\t\t\t\tInjectCode.After\r\n\t\t\t]\r\n        ])\r\n\t\t*/\r\n\r\n\t\tdocument.getElementsByTagName(\"head\")[0].appendChild(\r\n\t\t\tcreateElementFromString(/* html*/ `\r\n\t\t\t<style type=\"text/css\">\r\n\t\t\t\t.widget_container {\r\n\t\t\t\t\tdisplay: flex;\r\n\t\t\t\t\tposition: absolute;\r\n\t\t\t\t\tbottom: -12px;\r\n\t\t\t\t\tz-index: 10000\r\n\t\t\t\t}\r\n\r\n\t\t\t\t#comments_container {\r\n\t\t\t\t\t/* dirty hack */\r\n\t\t\t\t\tmargin-left:  24px;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t.widget_container > div { \r\n\t\t\t\t\twidth: 32px;\r\n\t\t\t\t\theight: 32px;\r\n\r\n\t\t\t\t\tposition: relative !important;\r\n\t\t\t\t\tbottom: 0px;\r\n\t\t\t\t\tleft: 0px !important;\r\n\r\n\t\t\t\t\tz-index:10000;\r\n\t\t\t\t\tfilter: drop-shadow(0px 3px 2px #000);\r\n\t\t\t\t\t-webkit-filter: drop-shadow(0px 3px 2px #000);\r\n\t\t\t\t\tcursor: pointer;\r\n\r\n\t\t\t\t\tmargin-left: 4px;\r\n\t\t\t\t}\r\n\t\t\t\t.widget_container > div:hover {\r\n\t\t\t\t\tbottom: 8px;\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\t.baseIcon {\r\n\t\t\t\t\twidth: 48px;\r\n\t\t\t\t\theight: 48px;\r\n\t\t\t\t\tposition: absolute;\r\n\t\t\t\t\tleft: -8px;\r\n\t\t\t\t\ttop: -8px;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdiv#lumpsAmount\r\n\t\t\t\t{\r\n\t\t\t\t\tposition: relative !important;\r\n\t\t\t\t}\r\n\t\t\t</style>`)\r\n\t\t);\r\n\t\t\r\n\t\tSkullyCore.onLoad.forEach((func) => func());\r\n\r\n\t\t// TopBars\r\n\t\tconst TopBar = l(\"comments\").appendChild(\r\n\t\t\tcreateElementFromString(/*html*/ `\r\n\t\t\t\t<div id=\"comments_container\" class=\"widget_container\"></div>\r\n\t\t\t`)\r\n\t\t);\r\n\r\n\t\tTopBarMenuWidget.Bars.forEach((bar) => {\r\n\t\t\tbar.div = TopBar.appendChild(bar.getDiv());\r\n\t\t});\r\n\r\n\t\tGame.ObjectsById.forEach((object) => {\r\n\t\t\tconst el = l(`row${object.id}`);\r\n\t\t\tif (el !== null) {\r\n\t\t\t\tconst building = el.appendChild(\r\n\t\t\t\t\tcreateElementFromString(/*html*/ `\r\n\t\t\t\t\t\t<div id=\"row${object.id}_container\" class=\"widget_container\"></div>\r\n\t\t\t\t\t`)\r\n\t\t\t\t);\r\n\r\n\t\t\t\tconst bars = BuildingBarMenuWidget.Bars;\r\n\t\t\t\tbars[object.name] ??= [];\r\n\r\n\t\t\t\tbars[object.name].forEach((bar) => {\r\n\t\t\t\t\tbar.div = building.appendChild(bar.getDiv());\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t/*\r\n        Cppkies.on(\"check\", () => {\r\n            if(typeof SkullyCore.ActiveTasks !== \"undefined\" && SkullyCore.ActiveTasks.length !== 0) {\r\n                SkullyCore.ActiveTasks.forEach((value, index) => {\r\n                    if (value.check()) {\r\n                        value.finish();\r\n                        delete SkullyCore.ActiveTasks[index];\r\n                    }\r\n                });\r\n            }\r\n        })\r\n        */\r\n\r\n\t});\r\n\r\n\tSkullyCore.onLoad.push(() => {\r\n\t\tnew TagCondition(\"Author\", \"#ffffff\", (me: AdvancedUpgrade) => me.pool === \"authors\");\r\n\r\n\t\tconst iconLink =\r\n\t\t\t\"https://raw.githubusercontent.com/MasterOfBob777/SkullyCore/master/static/skullyCoreIcons.png\";\r\n\r\n\t\tnew AuthorAchievement(\"Orteil & Opti\", \"The people who made this awesome game!\", [17, 5, \"\"]);\r\n\t\tnew AuthorAchievement(\"TheGLander\", \"The developer of Cppkies and the CCRepo (W.I.P)\", [3, 2, iconLink]);\r\n\t\tnew AuthorAchievement(\"TheSkullyKO\", \"The ideas guy and artist for SkullyCore and other Skully mods\", [\r\n\t\t\t1,\r\n\t\t\t0,\r\n\t\t\ticonLink,\r\n\t\t]);\r\n\t\tconst BobCheevo = new AuthorAchievement(\r\n\t\t\t\"Bob\",\r\n\t\t\t\"The developer that made this menu for authors and hopefully will work on much more.\",\r\n\t\t\t[2, 2, iconLink]\r\n\t\t);\r\n\t\t// #region Spoliers for tiny minigame, Hide it if you don't want to be spoiled!!!!! (Currenly unavailable tho) I might implement it later\r\n\t\t//*\r\n        \r\n        let BobClicks = 0;\r\n\r\n\t\tinterface BobLine {\r\n\t\t\ttext: string;\r\n\t\t\ticon?: Game.Icon;\r\n\t\t\tfunc?: () => void ;\r\n\t\t}\r\n        let BobLines: BobLine[] = [\r\n            {text: \"The developer that made this menu for authors and hopefully will work on much more.\"},\r\n            {text: \"Hi!\"},\r\n            {text: \"Hi!\"},\r\n            {text: \"Hi!\"},\r\n            {text: \"Hi!\"},\r\n            {text: \"Hi!\"},\r\n            {text: \"You can stop clicking on me now. There's not an achievement or anything, there's not bcps (Bob Clicks per Second), there's really nothing too interesting.\"},\r\n            {text: \"Like I'm serious there's nothing execept these words.\"},\r\n            {text: \"...\"},\r\n            {text: \".....\"},\r\n            {text: \".......\"},\r\n            {text: \"Hi!\"},\r\n            {text: \"Hi!\"},\r\n            {text: \"Hi!\"},\r\n            {text: \"Hi!\"},\r\n            {text: \"Hi!\"},\r\n            {text: \"Wow, you're still here. Usually those two tricks work. \"},\r\n            {text: \"Well there's nothing else.\"},\r\n            {text: \"I mean you can keep clicking on me.\"},\r\n            {text: \"But it's ultimately a waste of your time.\"},\r\n            {text: \"Oh look! There's a golden cookie, better go click on it not me!\", func: () => {\r\n                new Game.shimmer(\"golden\").force=\"blab\"; \r\n            }},\r\n            {text: \"Hah that's what you get for clicking on me!\"},\r\n            {text: \"Wait that wasn't a wrath cookie, just a harmless blab! Grrrrr, I'll get you next time!\"},\r\n            {text: \"For a reward, I'll go away for now, but I'll be back!\", func: () => {\r\n                Game.RemoveAchiev(\"Bob\")\r\n                setTimeout(() => {\r\n                    Game.Achievements[\"Bob\"].won=1;\r\n                    BobClicks++;\r\n                }, 10000)\r\n            }},\r\n            {text: \"Okay, I'm Back.\"},\r\n            {text: \"To be continued..... \"}\r\n        ]\r\n        BobCheevo.clickFunction = () => {\r\n\t\t\tif (BobClicks !== BobLines.length) BobClicks++;\r\n        }\r\n        BobCheevo.descFunc = () => {\r\n            if (typeof BobLines[BobClicks].func !== \"undefined\") {\r\n                BobLines[BobClicks].func();\r\n            }\r\n            return BobLines[BobClicks].text\r\n        }\r\n\r\n        BobCheevo.iconFunction = () => {\r\n            return BobLines[BobClicks]?.icon ?? [0, 2, iconLink]\r\n        }\r\n        //*/\r\n\t\t// #endregion\r\n\t\tconsole.log(\"SkullyCore Loaded!\");\r\n\r\n\t\t/* Examples\r\n\t\tconst testPage = new SkullyCore.PrestigePage(\"Test\", \"test\", [\"Legacy\"]);\r\n\t\tnew SkullyCore.PagedHeavenlyUpgrade(\r\n\t\t\t\"test\",\r\n\t\t\t\"test\",\r\n\t\t\t0,\r\n\t\t\t[-30, 70],\r\n\t\t\ttestPage.id,\r\n\t\t\t[0, 0],\r\n\t\t\t[testPage.VanillaRift.id]\r\n\t\t);\r\n\r\n\t\tnew SkullyCore.TopBarMenuWidget(\"test\", [0, 0], () => \"test\").onclick = () => {\r\n\t\t\tconsole.log(\"Test\");\r\n\t\t};\r\n\r\n\t\tconst test_icon = new SkullyCore.TopBarMenuWidget(\"test_icon\", [0, 0], () => \"test_icon\");\r\n\t\ttest_icon.onclick = function arrow() {\r\n\t\t\tconsole.log(\"test_icon\");\r\n\t\t\tthis.div.children[0].setAttribute(\"style\", IconToStyle([0, 1]));\r\n\t\t};\r\n\r\n\t\tnew SkullyCore.BuildingBarMenuWidget(\"test2\", [0, 0], \"Grandma\", () => \"test2\").onclick = () => {\r\n\t\t\tconsole.log(\"Test2\");\r\n\t\t};\r\n\t\t//*/\r\n\t});\r\n}\r\n\r\nexport default SkullyCoreExport;\r\n", "import { Upgrade } from \"cppkies/dist/upgrade\";\n\n/**\n * A class that adds a tag to a CrateLike as the name suggests\n * @class\n */\nexport class TagCondition {\n\tpublic static Conditions: TagCondition[] = [];\n\n\t/**\n\t * A class that adds a tag to a CrateLike as the name suggests\n\t * @param name The tag's name\n\t * @param color The color of your tag\n\t * @param tagFunction A function that should return a boolean on whether this tag should be added to a CrateLike\n\t */\n\tconstructor(\n\t\t/**\n\t\t * The name of your tag\n\t\t */\n\t\tpublic name: string, \n\n\t\t/**\n\t\t * The color of your tag. Ex. \"#ff0000\", \"#00ff00\", \"#0000ff\", \"#ffffff\", \"#000000\", etc.\n\t\t */\n\t\tpublic color: string, \n\t\t\n\t\t/**\n\t\t * A function that should return a boolean on whether this tag should be added to a CrateLike.\n\t\t * Should also check if the crate has noTags and respect that, unless you need to do that.\n\t\t * \n\t\t * @param me an Upgrade\n\t\t */\n\t\tpublic tagFunction: (me: any) => boolean\n\t) {\n\t\tTagCondition.Conditions.push(this);\n\t}\n}\n", "import { CommonValue } from \"cppkies/dist/helpers\";\nimport { ExcludeTypes } from \"../types\";\nimport Cppkies from \"cppkies\"\n\n/**\n * An extended Heavenly Upgrade class that add a few utility features\n * @class\n */\n export class AdvancedHeavenlyUpgrade extends Cppkies.HeavenlyUpgrade {\n\t/**\n\t * The pool that this heavenly upgrade is in\n\t */\n\tpublic pool: any;\n\n\t/**\n\t * The groups to exclude this heavenly upgrade from\n\t */\n\tpublic exclude: ExcludeTypes;\n\n\t/**\n\t * Remove all tags? Done before calculating tag conditions\n\t */\n\tpublic noTags: boolean;\n\n\t/**\n\t * Can you use neuromancy with this upgrade?\n\t */\n\tpublic noNeuromancy: boolean;\n\n\t/**\n\t * Creates a AdvancedHeavenlyUpgrade.\n\t * @param name The name of the heavenly upgrade\n\t * @param desc The heavenly upgrade's description\n\t * @param price The price of the heavenly upgrade\n\t * @param icon The icon of your heavenly upgrade\n\t * @param position The position of the heavenly upgrade on screen, (-30, -30) is the origin\n\t * @param parents Your heavenly upgrade's parents\n\t * @param buyFunc A function that gets called when buying your heavenly upgrade\n\t */\n\tconstructor(\n\t\tname: string,\n\t\tdesc: CommonValue<string>,\n\t\tprice: CommonValue<number>,\n\t\ticon: CommonValue<Game.Icon>,\n\t\tposition: [number, number],\n\t\tparents?: (string | number)[],\n\t\tbuyFunc?: () => void\n\t) {\n\t\tsuper(name, desc, price, icon, [position[0], position[1]], parents, buyFunc);\n\t}\n}", "import Cppkies from \"cppkies\"\nimport { CommonValue } from \"cppkies/dist/helpers\";\nimport { ExcludeTypes } from \"../types\";\n\n/**\n * An extended Upgrade class that add a few utility features\n * @class\n */\n export class AdvancedUpgrade extends Cppkies.Upgrade {\n\t/**\n\t * The pool that this upgrade is in\n\t */\n\tpublic pool: any;\n\n\t/**\n\t * The groups to exclude this upgrade from\n\t */\n\tpublic exclude: ExcludeTypes;\n\n\t/**\n\t * Remove all tags? Done before calculating tag conditions\n\t */\n\tpublic noTags: boolean;\n\n\t/**\n\t * Can you use neuromancy with this achievement?\n\t */\n\tpublic noNeuromancy: boolean;\n\n\t/**\n\t * Creates a AdvancedUpgrade\n\t * @param name The name of your upgrade\n\t * @param desc Your upgrade's description\n\t * @param price The price of your upgrade\n\t * @param icon Your upgrade's icon\n\t * @param buyFunc A function that gets called when your upgrade is bought\n\t */\n\tconstructor(\n\t\tname: string,\n\t\tdesc: CommonValue<string>,\n\t\tprice: CommonValue<number>,\n\t\ticon: CommonValue<Game.Icon>,\n\t\tbuyFunc?: () => void\n\t) {\n\t\tsuper(name, desc, price, icon, buyFunc);\n\t}\n}\n", "import { CommonValue } from \"cppkies/dist/helpers\";\r\nimport { TagCondition } from \"./tags\";\r\nimport { AdvancedHeavenlyUpgrade } from \"./upgrade\";\r\n\r\n/**\r\n * A class that adds a Heavenly Upgrade that is only visble if it's page is selected\r\n * @class\r\n */\r\nexport class PagedHeavenlyUpgrade extends AdvancedHeavenlyUpgrade {\r\n\t/**\r\n\t * Creates a PagedHeavenlyUpgrade.\r\n\t * @param name The name of the heavenly upgrade\r\n\t * @param desc The heavenly upgrade's description\r\n\t * @param price The price of the heavenly upgrade\r\n\t * @param position The position of the heavenly upgrade on screen, (-30, -30) is the origin\r\n\t * @param page The page's id that denotes when your heavenly upgrade will be visable\r\n\t * @param icon The icon of your heavenly upgrade\r\n\t * @param parents Your heavenly upgrade's parents\r\n\t * @param buyFunc A function that gets called when buying your heavenly upgrade\r\n\t */\r\n\tconstructor(\r\n\t\tname: string,\r\n\t\tdesc: CommonValue<string>,\r\n\t\tprice: CommonValue<number>,\r\n\t\tposition: [number, number],\r\n\t\tpage: string,\r\n\t\ticon: CommonValue<Game.Icon>,\r\n\t\tparents?: (string | number)[],\r\n\t\tbuyFunc?: () => void\r\n\t) {\r\n\t\tsuper(name, desc, price, icon, position, parents, buyFunc);\r\n\t\tif (typeof window.SkullyCore.pages[page] === \"undefined\") window.SkullyCore.pages[page] = [];\r\n\t\twindow.SkullyCore.pages[page].push(this);\r\n\t\tif (page !== \"vanilla\") Game.PrestigeUpgrades.pop();\r\n\t}\r\n}\r\n\r\n/**\r\n * A class that allows you to transfer yourself to another page. Note : You probably shouldn't define this yourself unless you know what you're doing\r\n * @class\r\n */\r\nexport class RiftUpgrade extends PagedHeavenlyUpgrade {\r\n\t/**\r\n\t * The page that this rift is from's id\r\n\t */\r\n\tpublic back: string;\r\n\r\n\t/**\r\n\t * The page that this rift goes to's id\r\n\t */\r\n\tpublic goto: string;\r\n\r\n\t/**\r\n\t * Don't change this. This is for checking if the rift is a rift when going through tags.\r\n\t */\r\n\tpublic isRift = true;\r\n\r\n\t/**\r\n\t * Creates a RiftUpgrade.\r\n\t * @param name The name of the heavenly upgrade\r\n\t * @param desc The heavenly upgrade's description\r\n\t * @param position The position of the heavenly upgrade on screen, (-30, -30) is the origin\r\n\t * @param goto\r\n\t * @param back\r\n\t * @param icon The icon of your heavenly upgrade\r\n\t * @param parents Your heavenly upgrade's parents\r\n\t * @param buyFunc A function that gets called when buying your heavenly upgrade\r\n\t */\r\n\tconstructor(\r\n\t\tname: string,\r\n\t\tdesc: CommonValue<string>,\r\n\t\tposition: [number, number],\r\n\t\tgoto: string,\r\n\t\tback: string,\r\n\t\ticon: CommonValue<Game.Icon> = [\r\n\t\t\t1,\r\n\t\t\t2,\r\n\t\t\t\"https://raw.githubusercontent.com/MasterOfBob777/SkullyCore/master/static/skullyCoreIcons.png\",\r\n\t\t],\r\n\t\tparents?: (string | number)[],\r\n\t\tbuyFunc?: () => void\r\n\t) {\r\n\t\tsuper(name, desc, 0, position, back, icon, parents, buyFunc);\r\n\t\tthis.exclude = {\r\n\t\t\tall: true,\r\n\t\t};\r\n\t\tthis.back = back;\r\n\t\tthis.noTags = true;\r\n\t\tthis.unlocked = 1;\r\n\t\tthis.bought = 1;\r\n\t\tthis.noNeuromancy = true;\r\n\t\tthis.goto = goto;\r\n\t}\r\n\r\n\tpublic activateFunction = (): void => {\r\n\t\twindow.SkullyCore.currentPage = this.goto;\r\n\t\tGame.BuildAscendTree();\r\n\t}\r\n}\r\n/*\r\n\tWhy do I not just change the pool? Because It breaks HUs, why you ask? Because Orteil that's why.\r\n*/\r\nnew TagCondition(\"Rift\", \"#9700cf\", (me) => typeof me.isRift !== \"undefined\");\r\n\r\n/**\r\n *\r\n * @class\r\n */\r\nexport class PrestigePage {\r\n\t/**\r\n\t * The page's name in a sentence\r\n\t */\r\n\tpublic name: string;\r\n\r\n\t/**\r\n\t * The internal id of the page\r\n\t */\r\n\tpublic id: string;\r\n\r\n\t/**\r\n\t * The rift to take you from the vanilla page to this page.\r\n\t */\r\n\tpublic Rift: RiftUpgrade;\r\n\r\n\t/**\r\n\t * The rift to take you from the this page to vanilla page.\r\n\t */\r\n\tpublic VanillaRift: RiftUpgrade;\r\n\r\n\t/**\r\n\t * Creates a PrestigePage\r\n\t * @param name The page's name in a sentence\r\n\t * @param id The internal id of the page\r\n\t * @param parents Your Goto Rift's parents (vanilla page)\r\n\t * @param gotoicon Your Goto Rift's icon\r\n\t * @param backicon Your Back Rift's icon\r\n\t */\r\n\tconstructor(name: string, id: string, parents: (string | number)[], gotoicon?: Game.Icon, backicon?: Game.Icon) {\r\n\t\tthis.name = name;\r\n\t\tthis.id = id;\r\n\t\tthis.Rift = new RiftUpgrade(\r\n\t\t\t`Goto${this.name}...`,\r\n\t\t\t\"Goto a new universe of possiblities. Don't worry, you can come back.\",\r\n\t\t\t[-30, -130],\r\n\t\t\tthis.id,\r\n\t\t\t\"vanilla\",\r\n\t\t\tgotoicon,\r\n\t\t\tparents\r\n\t\t);\r\n\t\tthis.VanillaRift = new RiftUpgrade(\r\n\t\t\t\"Goto Vanilla...\",\r\n\t\t\t\"Takes you back to the vanilla prestige tree.\",\r\n\t\t\t[-30, -30],\r\n\t\t\t\"vanilla\",\r\n\t\t\tthis.id,\r\n\t\t\tbackicon\r\n\t\t);\r\n\t}\r\n\r\n\t// TODO : Idleverse lore or something\r\n}\r\n", "export class BaseWidget {\n\t/**\n\t * The widget's named id, used for the various HTML elements create from this.\n\t */\n\tpublic id: string;\n\n\t/**\n\t * The widgets icon\n\t */\n\tpublic icon: Game.Icon;\n\n\t/**\n\t * The place the widget lies in the window.SkullyCore.BarWidgets.TopBar.Bars array\n\t */\n\tpublic index: number;\n\n\t/**\n\t * The function called when the game tries to render your widgets tooltip\n\t */\n\tpublic tooltip?: () => string;\n\t/**\n\t * The function called when a user tries to click on your widget\n\t */\n\tpublic onclick?: () => void;\n\t/**\n\t * Called after internal div creation, use this to edit your widget's HTML representation before it gets passed on to the internals\n\t */\n\tpublic customDiv?: (div: HTMLElement) => HTMLElement;\n\n\t/**\n\t * This is a refrence to the bar's HTML element in the dom\n\t * Useful little snippet to change the icon of the widget: bar.div.children[0].setAttribute(\"style\", SkullyCore.IconToStyle([0,0, \"\"]))\n\t */\n\tpublic div?: HTMLElement;\n\n\tprivate _hidden: boolean = false;\n\n\tset hidden(state: boolean) {\n\t\tthis._hidden = state;\n\t\tif (typeof this.div !== \"undefined\") {\n\t\t\tthis.div.style.display = state ? \"none\" : \"block\";\n\t\t}\n\t}\n\n\tget hidden() {\n\t\treturn this._hidden;\n\t}\n}\n", "/**\n * Creates a html object based on a string of valid HTML\n * @param htmlString a string that is valid HTML\n */\n export function createElementFromString(htmlString: string): ChildNode {\n\tconst div = document.createElement(\"div\");\n\tdiv.innerHTML = htmlString.trim();\n\treturn div.firstChild;\n}\n\ninterface ExcludeIsh {\n\texclude?: Partial<{\n\t\ttotal: boolean;\n\t\tdebug: boolean;\n\t\tprestige: boolean;\n\t\tcookie: boolean;\n\t\tother: boolean;\n\t\tshadow: boolean;\n\t\tall: boolean;\n\t}>;\n}\n\n/**\n *\n * @param type the exclude to check for\n * @param me the crate you are checking\n * @param str2 string\n * @param func the function to call if if matches\n */\nexport function exclude(type: keyof ExcludeIsh[\"exclude\"], me: ExcludeIsh): boolean {\n\tif (typeof me?.exclude !== \"undefined\") {\n\t\tif (typeof me?.exclude?.all !== \"undefined\" && !me.exclude.all) return true;\n\t\tif (typeof me?.exclude?.[type] !== \"undefined\" && !me.exclude[type]) return true;\n\t}\n\treturn false;\n}\n\n/**\n * Returns the style atrribute that an icon should have, usesIcon should be a class that this element should use if icon[2]\n * @param icon An icon\n */\nexport function IconToStyle(icon: Game.Icon): string {\n\treturn `${\n\t\t!(typeof icon[2] === \"undefined\" || icon[2] === \"\") ? `background-image: url(${icon[2]});` : \"\"\n\t}background-position:${-icon[0] * 48}px ${-icon[1] * 48}px;`;\n}\n", "export function attachTooltip(div: HTMLElement, tooltip: () => string) {\n\tdiv.addEventListener(\"mouseout\", () => {\n\t\tGame.tooltip.shouldHide = 1;\n\t});\n\tdiv.addEventListener(\"mouseover\", function arrow() {\n\t\tGame.tooltip.dynamic = 1;\n\t\tGame.tooltip.draw(\n\t\t\tthis,\n\t\t\ttooltip,\n\t\t\t\"bottom\"\n\t\t);\n\t\tGame.tooltip.wobble();\n\t});\n}", "\nimport { createElementFromString, IconToStyle } from \"../helpers/common\";\nimport { attachTooltip } from \"../helpers/tooltip\";\nimport { BaseWidget } from \"./BaseWidget\";\n\nexport class BuildingBarMenuWidget extends BaseWidget {\n\tstatic Bars: Record<string, BuildingBarMenuWidget[]> = {};\n\n\t/**\n\t * The building this widget is attached to.\n\t */\n\tpublic building: string;\n\n\tconstructor(id: string, icon: Game.Icon, building: string, tooltip?: () => string) {\n\t\tsuper();\n\t\tthis.id = id;\n\t\tthis.icon = icon;\n\t\tthis.building = building;\n\t\tthis.tooltip = tooltip;\n\t\tconst bars =BuildingBarMenuWidget.Bars\n\t\tbars[this.building] ??= []\n\t\tthis.index = bars[this.building].push(this) - 1;\n\t}\n\n\tpublic getDiv(): HTMLElement {\n\t\tlet div = createElementFromString(/*html*/ `\n\t\t\t<div \n\t\t\t\tclass=\"building_bar\" \n\t\t\t\tid=\"${this.id}BuildingBarMenu\"\n\t\t\t> \n\t\t\t\t<div \n\t\t\t\t\tid=\"${this.id}BuildingBarMenuIcon\" \n\t\t\t\t\tclass=\"baseIcon ${!this.icon[2] ? \"usesIcon\" : \"\"}\" \n\t\t\t\t\tstyle=\"${IconToStyle(this.icon)}\"\n\t\t\t\t></div>\n\t\t\t</div>\n\t\t`) as HTMLElement;\n\t\tif (typeof this.onclick !== \"undefined\") {\n\t\t\tdiv.addEventListener(\"click\", this.onclick.bind(this));\n\t\t}\n\t\tif (typeof this.tooltip !== \"undefined\") {\n\t\t\tattachTooltip(div, this.tooltip);\n\t\t}\n\t\tif (typeof this.customDiv !== \"undefined\") {\n\t\t\tdiv = this.customDiv(div);\n\t\t}\n\t\tif (this.hidden) {\n\t\t\tdiv.style.display = \"none\";\n\t\t}\n\t\treturn div;\n\t}\n}\n", "\nimport { createElementFromString, IconToStyle } from \"../helpers/common\";\nimport { attachTooltip } from \"../helpers/tooltip\";\nimport { BaseWidget } from \"./BaseWidget\";\n\nexport class TopBarMenuWidget extends BaseWidget {\n\tstatic Bars: TopBarMenuWidget[] = [];\n\n\tconstructor(id: string, icon: Game.Icon, tooltip?: () => string) {\n\t\tsuper();\n\t\tthis.id = id;\n\t\tthis.icon = icon;\n\t\tthis.tooltip = tooltip;\n\t\tthis.index = TopBarMenuWidget.Bars.push(this) - 1;\n\t}\n\n\tpublic getDiv(): HTMLElement {\n\t\tlet div = createElementFromString(/*html*/ `\n        <div \n\t\t\tclass=\"top_bar\"\n\t\t\tid=\"${this.id}TopBarMenu\"\n\t\t> \n            <div \n\t\t\t\tid=\"${this.id}TopBarMenuIcon\" \n\t\t\t\tclass=\"baseIcon ${!this.icon[2] ? \"usesIcon\" : \"\"}\" \n\t\t\t\tstyle=\"${IconToStyle(this.icon)}\"\n\t\t\t></div>\n        </div>`) as HTMLElement;\n\t\tif (typeof this.onclick !== \"undefined\") {\n\t\t\tdiv.addEventListener(\"click\", this.onclick.bind(this));\n\t\t}\n\t\tif (typeof this.tooltip !== \"undefined\") {\n\t\t\tattachTooltip(div, this.tooltip);\n\t\t}\n\t\tif (typeof this.customDiv !== \"undefined\") {\n\t\t\tdiv = this.customDiv(div);\n\t\t}\n\t\tif (this.hidden) {\n\t\t\tdiv.style.display = \"none\";\n\t\t}\n\t\treturn div;\n\t}\n}\n", "export interface AdvancedBuffInterface extends Game.Buff {\n\ttimeless?: boolean;\n\tdismissable?: boolean;\n}\n\nexport class AdvancedBuff extends Game.buffType {\n\tpublic timeless: boolean;\n\n\tpublic dismissable: boolean;\n\n\tconstructor(\n\t\tname: string,\n\t\tfunc: (time: number, arg1?: number, arg2?: number, arg3?: number) => AdvancedBuffInterface\n\t) {\n\t\tsuper(name, func);\n\t}\n}", "import { AdvancedBuff, AdvancedBuffInterface } from \"./buff/AdvancedBuff\";\r\n\r\nexport class Task extends AdvancedBuff {\r\n\t// Todo : hide buff timer and make it eternal, optional to enable the timer and have a time limit\r\n\t// Todo : allow the user to dismiss task if dismissable is set to true or has open sesame\r\n\r\n\t// Todo : Add buff dismissal to user when open sesame is enabled for all buffs\r\n\tpublic check: () => boolean;\r\n\tpublic finish: () => boolean;\r\n\r\n\tconstructor(\r\n\t\tname: string,\r\n\t\tfunc: (time: number, arg1?: number, arg2?: number, arg3?: number) => AdvancedBuffInterface,\r\n\t\tcheck: () => boolean,\r\n\t\tfinish: () => boolean\r\n\t) {\r\n\t\tsuper(name, func);\r\n\t}\r\n}\r\n/*\r\nname \r\ndesc\r\nicon \r\ncheck \r\nfinish\r\n*/\r\n", "import { ExcludeTypes } from \"../types\";\nimport Cppkies from \"cppkies\";\n\n/**\n * An extended Achievement class that add a few utility features\n * @class\n */\n export class AdvancedAchievement extends Cppkies.Achievement {\n\t/**\n\t * The pool that this achievement is in\n\t */\n\tpublic pool: any;\n\n\t/**\n\t * A function which returns the description of the achievement\n\t */\n\tpublic descFunc: () => string;\n\n\t/**\n\t * A function which returns the icon of the achievement\n\t */\n\tpublic iconFunction: () => Game.Icon;\n\n\t/**\n\t * The groups to exclude this achievement from\n\t */\n\tpublic exclude: ExcludeTypes;\n\n\t/**\n\t * Remove all tags? Done before calculating tag conditions\n\t */\n\tpublic noTags: boolean;\n\n\t/**\n\t * Can you use neuromancy with this achievement?\n\t */\n\tpublic noNeuromancy: boolean;\n\n\t/**\n\t * Creates a achievement with a few utility features.\n\t * @param name The name of the achievement\n\t * @param desc The description of it\n\t * @param icon The icon for it\n\t */\n\tconstructor(name: string, desc: string, icon: Game.Icon) {\n\t\tsuper(name, desc, icon);\n\t}\n}\n\n", "import { AdvancedAchievement } from \"./AdvancedAchievement\";\n\n/**\n * An class to add your own credits to your mod\n * @class\n */\n export class AuthorAchievement extends AdvancedAchievement {\n\t/**\n\t * Creates an Author Achievement\n\t * @param name Your name / The author's name\n\t * @param desc A short desciption of what you or the author did\n\t * @param icon An icon that preferably describes yourself / the author\n\t */\n\tconstructor(name: string, desc: string, icon: Game.Icon) {\n\t\tsuper(name, desc, icon);\n\t\tthis.pool = \"authors\";\n\t\tthis.exclude = { shadow: true };\n\t\tthis.won = 1;\n\t\tthis.noTags = true;\n\t\tthis.noNeuromancy = true;\n\t}\n}"],
  "mappings": "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",
  "names": []
}
